openapi: 3.0.1
info:
  title: Tep.Sales.Service API
  description: Tep.Sales.Service API
  termsOfService: https://github.com/
  contact:
    name: Administrator
    url: https://github.com/jefersonmlopes
    email: admin@tecnoepec.com.br
  license:
    name: Use under MIT License
    url: https://github.com/
  version: v1
paths:
  /tepsales/v1/addresses/{id}:
    delete:
      tags:
        - Address
      summary: Delete Address by Id
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: be272c04-bcb8-4187-b17a-7ade75e1d4e6
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Address
      summary: Get Address by id
      operationId: GetByIdAddress
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c7975efe-f48e-4f87-a389-5e9ed2feaafb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Address
      summary: Update part of Address
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Address/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8bf03f0d-7c9e-482a-94a7-3b0f43282354
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Address
      summary: Update Address
      parameters:
        - name: id
          in: path
          description: Address Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0cecdd9b-7d74-414c-90ef-565bbe26a175
      requestBody:
        description: Address to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAddressRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/all:
    get:
      tags:
        - Address
      summary: Get All Address by filter
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.asc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a974b046-e6b5-4206-9b2c-dff35afed9b5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/paged:
    get:
      tags:
        - Address
      summary: Get All Address by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c99aa986-0caf-4c3e-bfc3-4ca48281aae2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses:
    post:
      tags:
        - Address
      summary: Create Address
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c8ddb54b-0edc-4f6e-a6c1-f45665a60a1d
      requestBody:
        description: Address to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAddressRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 84166bdc-9ff3-4046-b070-e103a0aed608
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits/latest:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2412f83c-7aa6-49c3-81e7-dda3b0b39eaf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/{id}:
    delete:
      tags:
        - Client
      summary: Delete Client by Id
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3136b45f-e7ca-4c10-9656-4a8fd515382d
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Client
      summary: Get Client by id
      operationId: GetByIdClient
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 436d3862-6480-4372-b5db-7f7fdb9b8571
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Client
      summary: Update part of Client
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Client/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 73c6219f-5bab-48b6-97c0-081a7c379d8c
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Client
      summary: Update Client
      parameters:
        - name: id
          in: path
          description: Client Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2984ec51-885d-4b5f-aff1-a0a22a1e93b4
      requestBody:
        description: Client to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/all:
    get:
      tags:
        - Client
      summary: Get All Client by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 72646f45-63ea-4309-a2f3-171b5566ed71
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/paged:
    get:
      tags:
        - Client
      summary: Get All Client by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c2091929-56d0-48cf-995f-985619a59ee5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients:
    post:
      tags:
        - Client
      summary: Create Client
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4411d2d8-791d-4cad-890f-a3a883224f49
      requestBody:
        description: Client to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/{id}:
    delete:
      tags:
        - ClientContactCalendar
      summary: Delete ClientContactCalendar by Id
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d2d8cc21-07c4-4b14-abab-039067590bb3
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ClientContactCalendar
      summary: Get ClientContactCalendar by id
      operationId: GetByIdClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 414aeb69-e4e5-4d5b-b806-d2cf79fade6f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ClientContactCalendar
      summary: Update part of ClientContactCalendar
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ClientContactCalendar/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 579eddc9-86d9-4283-bf0a-de8598c15c96
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ClientContactCalendar
      summary: Update ClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fb3b4405-6507-4b64-b931-fcd6b0325dd1
      requestBody:
        description: ClientContactCalendar to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientContactCalendarRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/all:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5dd8a80d-3361-4834-afbf-33e37ec6baa4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/paged:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter with pagination
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9a7c00a7-49b1-49ee-b8f4-d0ea00faca51
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar:
    post:
      tags:
        - ClientContactCalendar
      summary: Create ClientContactCalendar
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d7159c8d-670f-428d-bef3-7a603760875b
      requestBody:
        description: ClientContactCalendar to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientContactCalendarRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/{id}:
    delete:
      tags:
        - Commission
      summary: Delete Commission by Id
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b3fd9685-9719-4491-b0d4-e50a91104298
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Commission
      summary: Get Commission by id
      operationId: GetByIdCommission
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92132200-aefb-4cbc-9d83-f25154eb3b5b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Commission
      summary: Update part of Commission
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Commission/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d32be85c-24e5-45cd-922b-8a5ee2d3c41b
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Commission
      summary: Update Commission
      parameters:
        - name: id
          in: path
          description: Commission Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: eedd9359-1cd6-4f0e-909d-f3a6f9fcb28b
      requestBody:
        description: Commission to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommissionRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/all:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 36447262-6927-4fa3-9940-8f55cbb7791a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/paged:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter with pagination
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ad16fede-82fc-4b10-90ed-13ea9b9ba6a0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions:
    post:
      tags:
        - Commission
      summary: Create Commission
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fb193640-5af8-4f1f-8db0-a582b1eb5eff
      requestBody:
        description: Commission to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommissionRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/{id}:
    delete:
      tags:
        - Company
      summary: Delete Company by Id
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b4131be3-8d0d-4e25-8118-8cb8403ca6ae
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Company
      summary: Get Company by id
      operationId: GetByIdCompany
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8e6d1806-76f2-426b-a8f6-900c281f2e31
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Company
      summary: Update part of Company
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Company/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 14254030-56f5-4163-b7fc-5c75b7f5a2c0
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Company
      summary: Update Company
      parameters:
        - name: id
          in: path
          description: Company Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 65b9243a-58e0-4efa-8342-28a701afb406
      requestBody:
        description: Company to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/all:
    get:
      tags:
        - Company
      summary: Get All Company by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 93f02afd-1935-4d58-a066-198698f8b723
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/paged:
    get:
      tags:
        - Company
      summary: Get All Company by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 36e4c4af-ac84-40f8-83d8-7698a2623431
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies:
    post:
      tags:
        - Company
      summary: Create Company
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92b45364-f4aa-406a-808f-28e4de018812
      requestBody:
        description: Company to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/{id}:
    delete:
      tags:
        - CompanyGlobalParameter
      summary: Delete CompanyGlobalParameter by Id
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b18f8f6f-8aeb-4fad-93de-e81d3e515de8
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get CompanyGlobalParameter by id
      operationId: GetByIdCompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a0bc523c-674d-478e-9728-2e88808931c8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - CompanyGlobalParameter
      summary: Update part of CompanyGlobalParameter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/CompanyGlobalParameter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f451424f-a5e0-476b-a1c5-a434f9f36711
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - CompanyGlobalParameter
      summary: Update CompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a85d80f9-f292-408e-906e-d1a67edb387b
      requestBody:
        description: CompanyGlobalParameter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyGlobalParameterRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/all:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2cdd76e7-2d85-4419-8e41-168bf838a44d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/paged:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a5e017f-2cb6-4844-81cb-595863a4ecd7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters:
    post:
      tags:
        - CompanyGlobalParameter
      summary: Create CompanyGlobalParameter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 85c8b940-c5f3-44b3-8423-be30807c42af
      requestBody:
        description: CompanyGlobalParameter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyGlobalParameterRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderstatus:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d4c05587-29e9-41dd-bcb7-619ec1baab01
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderbysalesman:
    get:
      tags:
        - Dashboard
      summary: Get GetPurchaseOrderBySalesman
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a43170cc-9015-4c8b-98bb-34602247720f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderfavoriteproducts:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f2027935-67e5-4e51-afd2-1ccdc98981f0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderlastsixmonths:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f6fdfd14-22d0-45eb-8362-b8e7bd9e6666
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/widgets:
    get:
      tags:
        - Dashboard
      summary: Get Widgets
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5ad23abe-96f7-491a-861f-557b818c2856
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWidgetsDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/{id}:
    delete:
      tags:
        - DiscountRule
      summary: Delete DiscountRule by Id
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cf48539d-a336-4070-83f1-48298d7ff248
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountRule
      summary: Get DiscountRule by id
      operationId: GetByIdDiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f8401b97-0661-4f85-bb29-1dbdd07caad2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountRule
      summary: Update part of DiscountRule
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountRule/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7d463b32-ce73-4e66-96f7-ffce2dc68ea7
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountRule
      summary: Update DiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c6348f16-8ed8-436e-ae93-3f62a3be16e5
      requestBody:
        description: DiscountRule to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountRuleRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/all:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ae1b27db-a5c0-4ced-b788-f58df98eb28e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/paged:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter with pagination
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92f9d695-8c22-4240-b3cf-feef8e0b4349
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules:
    post:
      tags:
        - DiscountRule
      summary: Create DiscountRule
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 146198a0-c00b-4408-96ba-4605c6b3d013
      requestBody:
        description: DiscountRule to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountRuleRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/{id}:
    delete:
      tags:
        - DiscountWeight
      summary: Delete DiscountWeight by Id
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 02c509c6-9c5d-4b14-95a3-d0af747fe30b
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountWeight
      summary: Get DiscountWeight by id
      operationId: GetByIdDiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c3dc2243-8276-4b0c-82b7-94c49bc23ebd
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountWeight
      summary: Update part of DiscountWeight
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountWeight/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 278053a9-959a-4375-8155-5e6d64252e8b
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountWeight
      summary: Update DiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a9a41c59-6346-4d71-a0e2-651fd3c5c251
      requestBody:
        description: DiscountWeight to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountWeightRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/all:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 27d7f32d-4b16-47b4-b07e-6ad0b9ba89e4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/paged:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter with pagination
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7eed647e-f5ba-431d-94fd-aa4ba5a88cb9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights:
    post:
      tags:
        - DiscountWeight
      summary: Create DiscountWeight
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1e4ea406-2cfc-475c-867d-f266d8430914
      requestBody:
        description: DiscountWeight to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountWeightRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/{id}:
    delete:
      tags:
        - DistribuitionCenter
      summary: Delete DistribuitionCenter by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c238a632-637c-4245-bb09-830ac7018eec
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenter
      summary: Get DistribuitionCenter by id
      operationId: GetByIdDistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dced24da-0d32-421c-9e12-f3c0d387a769
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenter
      summary: Update part of DistribuitionCenter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2e91d0d0-6f5b-4ab4-ac10-1c54ac0d89be
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenter
      summary: Update DistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3109ce90-bd88-4e9c-a15e-87824fac6c79
      requestBody:
        description: DistribuitionCenter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/all:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c8f56e62-fe7f-4007-87c1-1d62aae57970
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/paged:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 697bb4c6-7c7c-438a-8bb8-d5bb4a8191d5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters:
    post:
      tags:
        - DistribuitionCenter
      summary: Create DistribuitionCenter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 00f7dfc0-5381-48eb-bbb2-030f5cee7d20
      requestBody:
        description: DistribuitionCenter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/{id}:
    delete:
      tags:
        - DistribuitionCenterClientAddress
      summary: Delete DistribuitionCenterClientAddress by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 25708e89-2a49-443e-998c-7ef24ff90279
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get DistribuitionCenterClientAddress by id
      operationId: GetByIdDistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3689cf12-e797-426b-8ed8-949e381fd48c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update part of DistribuitionCenterClientAddress
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenterClientAddress/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bc6d216e-5cc1-463d-9891-d0c33db39710
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update DistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dbcc7a86-da63-4632-b24f-68293b5298bf
      requestBody:
        description: DistribuitionCenterClientAddress to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterClientAddressRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/all:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ead3d010-8047-40f2-9be4-9a6038eec7d5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/paged:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter with pagination
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1f942bff-d571-4ec3-9009-0479e6ee47c9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress:
    post:
      tags:
        - DistribuitionCenterClientAddress
      summary: Create DistribuitionCenterClientAddress
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92556639-0894-48c9-bdeb-a9f48fe7a3bf
      requestBody:
        description: DistribuitionCenterClientAddress to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterClientAddressRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/{id}:
    delete:
      tags:
        - FreightConversionFactor
      summary: Delete FreightConversionFactor by Id
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: af5794c1-c4cc-4214-b714-c79cebf091a8
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightConversionFactor
      summary: Get FreightConversionFactor by id
      operationId: GetByIdFreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e04e8106-e53b-433e-b125-e2fc7d245c90
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightConversionFactor
      summary: Update part of FreightConversionFactor
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightConversionFactor/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d39be227-36bb-4e53-9fcb-cf6cb1bf8daa
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightConversionFactor
      summary: Update FreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d778dc00-0574-4ad2-8470-eefb31cb1a0b
      requestBody:
        description: FreightConversionFactor to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightConversionFactorRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/all:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4783bfe3-a740-440b-a7b2-d5a889527b63
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/paged:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter with pagination
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a1a3dda2-9400-4360-b673-1b2cfa4db0a1
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors:
    post:
      tags:
        - FreightConversionFactor
      summary: Create FreightConversionFactor
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1a237424-db30-43f5-9c13-4ef56d67e341
      requestBody:
        description: FreightConversionFactor to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightConversionFactorRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/{id}:
    delete:
      tags:
        - FreightTable
      summary: Delete FreightTable by Id
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4fbf0ba4-e75d-4025-9567-da383a3d5069
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightTable
      summary: Get FreightTable by id
      operationId: GetByIdFreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 62a9fc3d-f729-42cb-9cf1-923629239535
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightTable
      summary: Update part of FreightTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4578cb7d-123e-4db8-9a6c-7bd97e031ca0
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightTable
      summary: Update FreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d86bb681-c6fa-40a8-86b0-dd7cf9cd7619
      requestBody:
        description: FreightTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/all:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 33d51ac1-3503-4536-a111-ce2f9cd3e434
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/paged:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 973d7f81-796e-43f6-b6f6-59cbfd47a6ba
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables:
    post:
      tags:
        - FreightTable
      summary: Create FreightTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 13ce1d69-fb26-448c-9139-c1713471cac9
      requestBody:
        description: FreightTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/{id}:
    delete:
      tags:
        - IntegrationConfig
      summary: Delete IntegrationConfig by Id
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e64949b6-db54-41f5-8f78-cba839315162
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationConfig
      summary: Get IntegrationConfig by id
      operationId: GetByIdIntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f7e00ea3-9205-4848-a5b8-8567c4826787
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationConfig
      summary: Update part of IntegrationConfig
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationConfig/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ed1d5dca-d306-4fa9-833e-6234564a8307
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationConfig
      summary: Update IntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ebea5cea-fc88-488b-b68a-20e0ceea898d
      requestBody:
        description: IntegrationConfig to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationConfigRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/all:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter
      parameters:
        - name: model
          in: query
          description: filter
          schema:
            $ref: '#/components/schemas/GetAllIntegrationConfigRequest'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 76373dbe-d764-4869-99ca-7e6f617b7ddf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/paged:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3fd3b4d8-31fe-4af9-b37e-d2aea2e33e58
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config:
    post:
      tags:
        - IntegrationConfig
      summary: Create IntegrationConfig
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6296b34d-1ef3-49c7-9bdb-97a82669e4a2
      requestBody:
        description: IntegrationConfig to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationConfigRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/{id}:
    delete:
      tags:
        - IntegrationStatus
      summary: Delete IntegrationStatus by Id
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 80b1b27f-813d-4766-8faa-3b24fa0774a0
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationStatus
      summary: Get IntegrationStatus by id
      operationId: GetByIdIntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6367e180-c0f3-4fd9-9cd0-a45d5f4080b9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationStatus
      summary: Update part of IntegrationStatus
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationStatus/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d8935f30-b9e2-4417-9bbe-cb3115031053
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationStatus
      summary: Update IntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 151ff6a0-36c8-4657-9eb5-dc8de5fd6f39
      requestBody:
        description: IntegrationStatus to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationStatusRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/all:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 82ca0007-c709-4b47-9c78-b734320e179e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/paged:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter with pagination
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6c227c62-69ea-4a88-b538-c1a03dab2d04
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status:
    post:
      tags:
        - IntegrationStatus
      summary: Create IntegrationStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 08bea0e7-3b52-4bbf-8960-7b64c2c7ffa2
      requestBody:
        description: IntegrationStatus to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationStatusRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications/{id}:
    delete:
      tags:
        - Notification
      summary: Delete Notification by Id
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 68d6cf6f-e9fc-4ece-b7d1-caabea1d76ed
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Notification
      summary: Get Notification by id
      operationId: GetByIdNotification
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: beda3238-c74c-43f0-b316-0e4193cccf42
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Notification
      summary: Update part of Notification
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Notification/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3fdc4f57-f003-4c38-bd03-0a133ca848ae
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Notification
      summary: Update Notification
      parameters:
        - name: id
          in: path
          description: Notification Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92aa8d87-db95-4ea5-90e3-d1782546f991
      requestBody:
        description: Notification to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNotificationRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications:
    get:
      tags:
        - Notification
      summary: Get All Notification by filter with pagination
      parameters:
        - name: message
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/NotificationType'
        - name: userPhone
          in: query
          schema:
            type: string
        - name: userName
          in: query
          schema:
            type: string
        - name: userEmail
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 44f088c3-aa3a-4afe-98e0-d5bf1f2ac2b9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    post:
      tags:
        - Notification
      summary: Create Notification
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fb582791-1b58-40c5-9936-e73155edf92c
      requestBody:
        description: Notification to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotificationRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/{id}:
    delete:
      tags:
        - PaymentCondition
      summary: Delete PaymentCondition by Id
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 18857d73-5e46-47ec-8310-7465c36c066d
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentCondition
      summary: Get PaymentCondition by id
      operationId: GetByIdPaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c890486d-da14-488b-9826-6f20e17ea8b7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentCondition
      summary: Update part of PaymentCondition
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentCondition/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b6f20235-4698-47ba-b689-48881ff10b5f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentCondition
      summary: Update PaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c952af19-929d-47e4-b3cd-17e41029354e
      requestBody:
        description: PaymentCondition to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentConditionRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/paged:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 00bad059-996b-4bd7-8fa0-c626a0ba22f6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/all:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 75ab1a5b-2a2c-4b07-a79e-e10dfe29e0be
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions:
    post:
      tags:
        - PaymentCondition
      summary: Create PaymentCondition
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 69ec7ca1-570a-41fa-80ad-b51800128d59
      requestBody:
        description: PaymentCondition to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentConditionRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/{id}:
    delete:
      tags:
        - PaymentPriceTable
      summary: Delete PaymentPriceTable by Id
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d4d42531-6708-4186-bad2-ee93035ec7f0
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentPriceTable
      summary: Get PaymentPriceTable by id
      operationId: GetByIdPaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ae050a94-cdf3-432e-bf6b-9b960ada6b20
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentPriceTable
      summary: Update part of PaymentPriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentPriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e9b3b637-00a8-453e-815f-0f6fc5f2e419
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentPriceTable
      summary: Update PaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 32bf311e-838e-49fc-9c8a-39665d4a1c7b
      requestBody:
        description: PaymentPriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentPriceTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/paged:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter with pagination
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 36c65f92-60ac-41ac-904a-df1526f0126d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/all:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: da44bc45-88e5-4db5-befa-460c4b33f1bc
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables:
    post:
      tags:
        - PaymentPriceTable
      summary: Create PaymentPriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f180dace-601e-4aea-a9c3-e011a47e7119
      requestBody:
        description: PaymentPriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentPriceTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/{id}:
    delete:
      tags:
        - PriceTable
      summary: Delete PriceTable by Id
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b7c0310b-15e5-48fe-9bed-79839742ab6f
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTable
      summary: Get PriceTable by id
      operationId: GetByIdPriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a5051438-d775-4809-b734-517bc965ec7d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTable
      summary: Update part of PriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5659a7c5-0f8d-4545-a003-066d353a90e5
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTable
      summary: Update PriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a1034430-48b9-4970-aca9-cdb3837ff142
      requestBody:
        description: PriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/paged:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e8d56cb8-a2c5-430c-991d-b091c83093a1
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/all:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d0e43992-8202-4a5a-8691-797671b0fac8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables:
    post:
      tags:
        - PriceTable
      summary: Create PriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e0278f03-b616-4258-8149-1f3ebf490d20
      requestBody:
        description: PriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/{id}:
    delete:
      tags:
        - PriceTableItem
      summary: Delete PriceTableItem by Id
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7dafae8a-4df4-4905-a9e5-ec7c38b7a070
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableItem
      summary: Get PriceTableItem by id
      operationId: GetByIdPriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 304927c9-da5e-42a1-ba73-e4d69d1c95d6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableItem
      summary: Update part of PriceTableItem
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableItem/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5aea65cc-64cc-4790-b90c-9794ceb8b501
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableItem
      summary: Update PriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 590e73e7-c81c-4ce4-b968-6b7a482bb7ee
      requestBody:
        description: PriceTableItem to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableItemRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/paged:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter with pagination
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 60dc0b57-cf89-4604-9937-cd32b734947f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/all:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 297cdc52-5982-474b-ad94-f568f231076f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems:
    post:
      tags:
        - PriceTableItem
      summary: Create PriceTableItem
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3eb5bbf6-9d3d-4899-bdff-ddd4daaaf282
      requestBody:
        description: PriceTableItem to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableItemRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/{id}:
    delete:
      tags:
        - PriceTableUnloading
      summary: Delete PriceTableUnloading by Id
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1c92bf35-984d-4748-bcbd-ff8f9adcbc75
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableUnloading
      summary: Get PriceTableUnloading by id
      operationId: GetByIdPriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ea0d9e1a-85b9-4de8-bb6b-aa692fba3f57
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableUnloading
      summary: Update part of PriceTableUnloading
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableUnloading/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 10c1d6fe-d9ec-4b7f-80fb-d7807e6938af
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableUnloading
      summary: Update PriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a6ac9a23-dfec-44a0-a75e-a14963389eb5
      requestBody:
        description: PriceTableUnloading to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableUnloadingRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/paged:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter with pagination
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1327ac80-bd7e-4bed-a266-6d479631536d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/all:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 807931ad-915d-4563-952f-c27a85a54f23
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading:
    post:
      tags:
        - PriceTableUnloading
      summary: Create PriceTableUnloading
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ce5aeb0f-2345-4ab8-a335-2a195a3eabb3
      requestBody:
        description: PriceTableUnloading to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableUnloadingRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/{id}:
    delete:
      tags:
        - Product
      summary: Delete Product by Id
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8ae72d85-afa7-49b9-a1c8-64532e2044e1
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Product
      summary: Get Product by id
      operationId: GetByIdProduct
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fcbf2451-0dd9-411b-93fc-822024b0bcee
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Product
      summary: Update part of Product
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Product/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4b57245a-d972-47d8-acc9-5e00a9dbdc64
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Product
      summary: Update Product
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3b20586f-aa97-4ea1-8a23-d29a6d096eee
      requestBody:
        description: Product to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/paged:
    get:
      tags:
        - Product
      summary: Get All Product by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2c8b301d-3536-4817-aa97-33cc6b24da8d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/all:
    get:
      tags:
        - Product
      summary: Get All Product by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 77711b58-fe33-4c49-83b3-114d549f0f42
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products:
    post:
      tags:
        - Product
      summary: Create Product
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e9e820f7-c479-407a-9bdd-11dc33987521
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/{id}:
    delete:
      tags:
        - ProductGroup
      summary: Delete ProductGroup by Id
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b8442e66-ef06-4ab9-992b-d6303366d08d
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by id
      operationId: GetByIdProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 93af2fd2-3964-462d-b1cf-65c782e89af6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductGroup
      summary: Update part of ProductGroup
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductGroup/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 305fc73e-eb56-4bbb-bc24-c707dfe1796f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductGroup
      summary: Update ProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9b9e4512-d71e-406b-b168-215908418208
      requestBody:
        description: ProductGroup to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductGroupRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/paged:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 15bfec78-7797-4516-8e9e-62cece6c00d1
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/all:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0d6d65da-7558-46d6-841d-6dbc4ef57213
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/integration/{externalCode}:
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by external Code
      operationId: GetByExternalCodeProductGroupController
      parameters:
        - name: externalCode
          in: path
          description: ProductGroup external code
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 14c94b5e-ac7c-4bf4-9839-5df8e0b47a30
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups:
    post:
      tags:
        - ProductGroup
      summary: Create ProductGroup
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 57a41a73-d5b5-4c50-bdc5-3b3113b1c0f8
      requestBody:
        description: ProductGroup to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductGroupRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/{id}:
    delete:
      tags:
        - ProductLine
      summary: Delete ProductLine by Id
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dd3dca12-1604-4189-9212-b059f01d7f4e
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductLine
      summary: Get ProductLine by id
      operationId: GetByIdProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92c02b67-e1a2-44f7-b93c-8352e449239e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductLine
      summary: Update part of ProductLine
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductLine/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ac592a25-5ffa-46ec-9e92-405f621e6e82
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductLine
      summary: Update ProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e0dbb0e7-f889-4fbe-a819-e481b1e0454c
      requestBody:
        description: ProductLine to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductLineRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/paged:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cef7bea0-a592-436c-8e21-98a8d67c3cb6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/all:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 917ab43e-a26e-440f-8e55-bc59b3206483
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines:
    post:
      tags:
        - ProductLine
      summary: Create ProductLine
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 955c9b35-c740-45c4-a03e-e2c34c91f71c
      requestBody:
        description: ProductLine to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductLineRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}:
    delete:
      tags:
        - PurchaseOrder
      summary: Delete PurchaseOrder by Id
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6ee201b6-54e1-4b76-9167-b0a297dc85d5
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PurchaseOrder
      summary: Get PurchaseOrder by id
      operationId: GetByIdPurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0d4ceed7-d611-451e-a1a8-ce5627ed0385
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PurchaseOrder
      summary: Update part of PurchaseOrder
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PurchaseOrder/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 692c5e8a-a14b-40dc-8e67-ce8ae738e8fa
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PurchaseOrder
      summary: Update PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ff861cc4-0937-4f10-8f70-4a5c2fee61b7
      requestBody:
        description: PurchaseOrder to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPurchaseOrderRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/paged:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter with pagination
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3dc36060-4864-4f64-a266-b09df36aa8b0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/all:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1768bade-c12e-436f-ae41-f875dea49d04
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/approve:
    post:
      tags:
        - PurchaseOrder
      summary: Approve PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6fa7e61d-1208-4096-a13a-7e5caa9a4461
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/cancel:
    post:
      tags:
        - PurchaseOrder
      summary: Cancel PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bc554ad2-9340-4b9f-9a39-af7f5b5a69ab
      requestBody:
        description: PostCancelPurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCancelPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders:
    post:
      tags:
        - PurchaseOrder
      summary: Create PurchaseOrder
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fad3331c-7cb7-4acb-9de6-b38f32a0c3ed
      requestBody:
        description: PurchaseOrder to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPurchaseOrderRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/refused:
    post:
      tags:
        - PurchaseOrder
      summary: Refused PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3d4cdc10-bb20-4ebb-ad42-339d33b4872d
      requestBody:
        description: Post Refused PurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRefusedPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/sendtoapprove:
    post:
      tags:
        - PurchaseOrder
      summary: SendToApprove PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: areaManagerCode
          in: query
          description: Area Manager Code
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1df41184-e2ee-45b9-b326-5917e324dcd8
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/{id}:
    delete:
      tags:
        - ReasonCancel
      summary: Delete ReasonCancel by Id
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e35ce232-fa44-4df3-aec0-009e9e691268
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonCancel
      summary: Get ReasonCancel by id
      operationId: GetByIdReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bc83fbaf-6fba-4361-99ca-c9825493c25d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonCancel
      summary: Update part of ReasonCancel
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonCancel/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 22d2de39-9cd2-481c-bdd8-10ff54cfeb97
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonCancel
      summary: Update ReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 858b0fc4-99d0-4d56-b1e2-2436b4d35533
      requestBody:
        description: ReasonCancel to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonCancelRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/paged:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: df251454-abc9-43f2-ad8a-cc4a9ce34e86
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/all:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 413c50af-2568-4bee-a021-d95e57aa550f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels:
    post:
      tags:
        - ReasonCancel
      summary: Create ReasonCancel
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6ac8767d-a2fa-4620-8b42-6482d745e8b4
      requestBody:
        description: ReasonCancel to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonCancelRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/{id}:
    delete:
      tags:
        - ReasonVisit
      summary: Delete ReasonVisit by Id
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6d7ca9bb-1c0f-4b50-8d20-a33284c0c1e5
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonVisit
      summary: Get ReasonVisit by id
      operationId: GetByIdReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a6d4faa7-27ba-4e6f-af7b-3b257b4a005b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonVisit
      summary: Update part of ReasonVisit
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonVisit/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fd17408e-6d11-4f29-b86f-f61e3907cb02
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonVisit
      summary: Update ReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bf2f8be7-94d0-4c71-b792-43df7810268e
      requestBody:
        description: ReasonVisit to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonVisitRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/paged:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter with pagination
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e2fb1d0e-7508-479a-96eb-4e525ef07956
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/all:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a5a7d95f-8e62-4748-be75-26d60714cba3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits:
    post:
      tags:
        - ReasonVisit
      summary: Create ReasonVisit
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3f9512dc-b551-486a-8aef-7959f284fb27
      requestBody:
        description: ReasonVisit to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonVisitRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/{id}:
    delete:
      tags:
        - Template
      summary: Delete Template by Id
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 42505571-293b-4db1-a9bb-d2b0bbe9e987
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Template
      summary: Get Template by id
      operationId: GetByIdTemplate
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d487a1f2-81ac-4739-9030-308743b69f67
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Template
      summary: Update part of Template
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Template/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c04770cd-5972-4cd2-b50f-d01e3ab39461
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Template
      summary: Update Template
      parameters:
        - name: id
          in: path
          description: Template Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c25bde6e-01ea-401d-b1cd-b55329bbe705
      requestBody:
        description: Template to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTemplateRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/paged:
    get:
      tags:
        - Template
      summary: Get All Template by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 508ac1cb-d70a-408a-9e7a-a82440df4bfb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/all:
    get:
      tags:
        - Template
      summary: Get All Template by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3cf955c1-41c3-422d-8fb8-d91a83284dd7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates:
    post:
      tags:
        - Template
      summary: Create Template
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 27eceac7-720c-4c22-8201-0ef37d882364
      requestBody:
        description: Template to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTemplateRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/{id}:
    delete:
      tags:
        - User
      summary: Delete User by Id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c9ae71d1-7b2b-432d-8202-fdbcb21b3b46
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - User
      summary: Get User by id
      operationId: GetByIdUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0f621235-26fa-4884-967f-2fa4a77eba02
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - User
      summary: Update part of User
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/User/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b2125c56-55fe-4e3b-9407-c69ddcd05a15
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - User
      summary: Update User
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e2f7bf02-1161-417e-bd8d-39700821953d
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/paged:
    get:
      tags:
        - User
      summary: Get All User by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 93882ff8-e2f1-4f4f-a7c4-c9cce0832565
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/all:
    get:
      tags:
        - User
      summary: Get All User by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 48ad2c45-5f70-4794-9e7e-201eaa3cd7fe
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/userinfo:
    get:
      tags:
        - User
      summary: Get User Info
      operationId: GetUserInfo
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a5ec1f0-c877-4835-b325-97aed655928c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6517acd5-e530-40ce-91d6-18305bcc1dc1
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/forcerchangepassword:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f91ad03c-89bd-410a-b4a3-886ca64b140b
      requestBody:
        description: Force Change Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserForceChangePasswordRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/pushtoken:
    post:
      tags:
        - User
      summary: Add User Push Token
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d5c8d6fe-5ce7-4ef8-9404-43cee519658e
      requestBody:
        description: FCM Token
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/reset_password:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 479aec1e-d0ac-4f3b-bd97-c292dc8d73f7
      requestBody:
        description: Reset Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserResetPassword'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signin:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7ac6e4d9-5a8e-4476-bcdc-50b6493b9220
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserSignInRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserSignInResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signup:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f515daf0-38a4-4bcd-97b2-6ad9f3360bee
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/{id}:
    delete:
      tags:
        - VehicleType
      summary: Delete VehicleType by Id
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4a9fa60c-becb-4f5f-8591-28b0c46434e3
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - VehicleType
      summary: Get VehicleType by id
      operationId: GetByIdVehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f4f39e54-d4d9-450a-a860-5bdd520d4732
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - VehicleType
      summary: Update part of VehicleType
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/VehicleType/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5504a653-2b80-4ec4-bfa6-fb73cf0b13b9
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - VehicleType
      summary: Update VehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7e469b83-9985-482d-8123-068df020ac48
      requestBody:
        description: VehicleType to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutVehicleTypeRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/paged:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a3a33977-9dcc-4d0b-a45c-affe8cd3d31b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/all:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 909a9340-f685-4cb0-ab6e-238d76f8ac72
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes:
    post:
      tags:
        - VehicleType
      summary: Create VehicleType
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 46da20f8-7ac8-4e67-b838-53529c4dfd94
      requestBody:
        description: VehicleType to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVehicleTypeRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/version:
    get:
      tags:
        - Version
      summary: Get Version
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 91042cc0-59f2-4c34-b765-9992d5d9683f
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
components:
  schemas:
    ActionType:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
          nullable: true
        longitude:
          type: number
          format: double
          nullable: true
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    AddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    AddressTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    ClientStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    CommissionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DatabaseCollector:
      type: object
      properties:
        outPutFolder:
          type: string
          nullable: true
        connection:
          $ref: '#/components/schemas/DatabaseConnection'
        queries:
          $ref: '#/components/schemas/DatabaseQueries'
      additionalProperties: false
    DatabaseConnection:
      type: object
      properties:
        name:
          type: string
          nullable: true
        server:
          type: string
          nullable: true
        port:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        commandTimeout:
          type: integer
          format: int32
        minPoolSize:
          type: integer
          format: int32
        maxPoolSize:
          type: integer
          format: int32
      additionalProperties: false
    DatabaseQueries:
      type: object
      properties:
        queryAddresses:
          type: string
          nullable: true
        queryAddressesIsEnable:
          type: boolean
        queryClients:
          type: string
          nullable: true
        queryClientsIsEnable:
          type: boolean
        queryFreightTables:
          type: string
          nullable: true
        queryFreightTablesIsEnable:
          type: boolean
        queryPaymentConditions:
          type: string
          nullable: true
        queryPaymentConditionsIsEnable:
          type: boolean
        queryPaymentPriceTables:
          type: string
          nullable: true
        queryPaymentPriceTablesIsEnable:
          type: boolean
        queryPriceTableItems:
          type: string
          nullable: true
        queryPriceTableItemsIsEnable:
          type: boolean
        queryPriceTables:
          type: string
          nullable: true
        queryPriceTablesIsEnable:
          type: boolean
        queryProductGroups:
          type: string
          nullable: true
        queryProductGroupsIsEnable:
          type: boolean
        queryProductLines:
          type: string
          nullable: true
        queryProductLinesIsEnable:
          type: boolean
        queryProducts:
          type: string
          nullable: true
        queryProductsIsEnable:
          type: boolean
        queryUsers:
          type: string
          nullable: true
        queryUsersIsEnable:
          type: boolean
        queryVehicleTypes:
          type: string
          nullable: true
        queryVehicleTypesIsEnable:
          type: boolean
        queryDistribuitionCenterClientAddress:
          type: string
          nullable: true
        queryDistribuitionCenterClientAddressIsEnable:
          type: boolean
        queryFreightConversionFactor:
          type: string
          nullable: true
        queryFreightConversionFactorIsEnable:
          type: boolean
        queryDiscountRule:
          type: string
          nullable: true
        queryDiscountRuleIsEnable:
          type: boolean
        queryCommission:
          type: string
          nullable: true
        queryCommissionIsEnable:
          type: boolean
        queryReasonCancel:
          type: string
          nullable: true
        queryReasonCancelIsEnable:
          type: boolean
        queryPriceTableUnloading:
          type: string
          nullable: true
        queryPriceTableUnloadingIsEnable:
          type: boolean
      additionalProperties: false
    DiscountRuleStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DiscountTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DiscountWeightTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DistribuitionCenterClientAddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DocumentVersion:
      type: object
      additionalProperties: false
    ErrorDetails:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: string
          nullable: true
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FreightComposition:
      type: object
      properties:
        vehicleType:
          $ref: '#/components/schemas/VehicleType'
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightCompositionModel:
      type: object
      properties:
        vehicleTypeId:
          type: string
          format: uuid
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightConversionFactorStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightType:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    GetAllAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    GetAllAuditResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        entity:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ActionType'
        data:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    GetAllCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    GetAllCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    GetAllCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    GetAllDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    GetAllDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    GetAllDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    GetAllDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    GetAllFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    GetAllFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    GetAllIntegrationConfigRequest:
      type: object
      additionalProperties: false
    GetAllIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    GetAllIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    GetAllNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllPagedAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedAuditResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAuditResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientContactCalendarResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCommissionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCommissionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyGlobalParameterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountRuleResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountRuleResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountWeightResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountWeightResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightConversionFactorResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationConfigResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationStatusResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedNotificationResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllNotificationResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentConditionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentConditionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableItemResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableItemResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableUnloadingResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductGroupResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductGroupResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductLineResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductLineResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPurchaseOrderResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonCancelResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonCancelResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonVisitResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonVisitResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedTemplateResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllTemplateResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedUserResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllUserResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedVehicleTypeResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllVehicleTypeResponse'
          nullable: true
      additionalProperties: false
    GetAllPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    GetAllPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    GetAllPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    GetAllPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    GetAllPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    GetAllProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    GetAllProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    GetAllProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    GetAllPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightComposition'
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        reasonCancel:
          $ref: '#/components/schemas/ReasonCancel'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    GetAllReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    GetAllReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    GetAllTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    GetAllUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    GetAllVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    GetWidgetsDto:
      type: object
      properties:
        totalOrders:
          type: integer
          format: int64
        totalUsers:
          type: integer
          format: int64
        totalProducts:
          type: integer
          format: int64
        totalClients:
          type: integer
          format: int64
      additionalProperties: false
    GroupPurchaseOrderDto:
      type: object
      properties:
        totalInProgress:
          type: integer
          format: int64
        totalWaitingForApproved:
          type: integer
          format: int64
        totalApproved:
          type: integer
          format: int64
        totalRefused:
          type: integer
          format: int64
        totalCanceled:
          type: integer
          format: int64
        totalExpired:
          type: integer
          format: int64
      additionalProperties: false
    IntegrationStatusActions:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
    NotificationChannel:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    NotificationType:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    Operation:
      type: object
      properties:
        operationType:
          $ref: '#/components/schemas/OperationType'
        path:
          type: string
          nullable: true
        op:
          type: string
          nullable: true
        from:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    OperationType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PaymentCondition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PaymentConditionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PaymentPriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PostAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostCancelPurchaseOrderRequest:
      type: object
      properties:
        reasonCancelId:
          type: string
          format: uuid
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PostClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PostClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    PostNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PostPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PostPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    PostReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostRefusedPurchaseOrderRequest:
      type: object
      properties:
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostUserForceChangePasswordRequest:
      required:
        - defaultPassword
        - email
      type: object
      properties:
        email:
          minLength: 1
          type: string
        defaultPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserPushTokenRequest:
      required:
        - deviceId
        - token
      type: object
      properties:
        token:
          minLength: 1
          type: string
        deviceId:
          minLength: 1
          type: string
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
      additionalProperties: false
    PostUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        password:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResetPassword:
      required:
        - email
        - newPassword
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        newPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserResetPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PostUserSignInRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserSignInResponse:
      type: object
      properties:
        token:
          type: string
          nullable: true
        expiresIn:
          type: number
          format: double
      additionalProperties: false
    PostVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PostVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PriceTableItemStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableUnloadingStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
      additionalProperties: false
    ProductEspecification:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    ProductGroupStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductLineStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PurchaseOrderHistory:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
        date:
          type: string
          format: date-time
        summary:
          type: string
          nullable: true
        userId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    PurchaseOrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderItemModelBase:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderStatus:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PushToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        deviceId:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PushTokenStatus'
      additionalProperties: false
    PushTokenStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PutAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PutClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PutClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PutCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PutCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PutCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PutDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PutDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PutDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PutDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PutFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PutFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PutIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PutIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PutNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PutPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PutPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PutPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PutPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PutPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PutProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PutProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PutProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PutPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PutReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PutReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PutTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PutUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PutVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    ReasonCancel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    ReasonCancelStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ReferenceTypeEnum:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    TablePriceOperationTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    UnitMeasurementTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isSuperAdmin:
          type: boolean
        isAdmin:
          type: boolean
        isRegionManager:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        forceChangePassword:
          type: boolean
        pushTokens:
          type: array
          items:
            $ref: '#/components/schemas/PushToken'
          nullable: true
      additionalProperties: false
    UserStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    VehicleType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    VehicleTypeStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\""
      name: Authorization
      in: header
security:
  - Bearer: []
