openapi: 3.0.1
info:
  title: Tep.Sales.Service API
  description: Tep.Sales.Service API
  termsOfService: https://github.com/
  contact:
    name: Administrator
    url: https://github.com/jefersonmlopes
    email: admin@tecnoepec.com.br
  license:
    name: Use under MIT License
    url: https://github.com/
  version: v1
paths:
  /tepsales/v1/addresses/{id}:
    delete:
      tags:
        - Address
      summary: Delete Address by Id
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 479979c1-14f0-4ad1-839f-6e076a9b5945
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Address
      summary: Get Address by id
      operationId: GetByIdAddress
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 299fe50f-9c18-491c-abe1-f7915cee4a52
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Address
      summary: Update part of Address
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Address/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 79852a10-2cec-489c-a7dd-0748d634ef37
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Address
      summary: Update Address
      parameters:
        - name: id
          in: path
          description: Address Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f932d0f6-20b0-456b-95c0-972b65555ed8
      requestBody:
        description: Address to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAddressRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/all:
    get:
      tags:
        - Address
      summary: Get All Address by filter
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.asc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c4a867b4-7939-43e6-a2d3-149697d5ac75
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/paged:
    get:
      tags:
        - Address
      summary: Get All Address by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0f228bc3-e698-4815-9ffd-0f9f34b72ae7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses:
    post:
      tags:
        - Address
      summary: Create Address
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d220e2dd-d571-4c0f-8c0b-3dc4580daeb4
      requestBody:
        description: Address to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAddressRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2bf0271b-7548-4415-9a0a-039037513169
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits/latest:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 34021f1e-85be-4c52-89f4-3c8e156e6edc
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/{id}:
    delete:
      tags:
        - Client
      summary: Delete Client by Id
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f21fa27f-2e0f-4429-9b6c-baefa9cb2f02
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Client
      summary: Get Client by id
      operationId: GetByIdClient
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f33a2afd-14fa-4b70-88ee-e7bebdba13fa
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Client
      summary: Update part of Client
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Client/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5f1e14da-d482-4616-95ec-fcea2ed954ca
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Client
      summary: Update Client
      parameters:
        - name: id
          in: path
          description: Client Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e7d6c6fb-cd8b-42b4-a8b4-ae689f2a4591
      requestBody:
        description: Client to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/all:
    get:
      tags:
        - Client
      summary: Get All Client by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b5599ea9-952f-4504-94c1-9d4586eca5db
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/paged:
    get:
      tags:
        - Client
      summary: Get All Client by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 15afe7a4-19b8-4e99-8b07-aa91d1a738b9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients:
    post:
      tags:
        - Client
      summary: Create Client
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 41d4fa8c-3488-4508-8d51-fb38bff2a775
      requestBody:
        description: Client to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/{id}:
    delete:
      tags:
        - ClientContactCalendar
      summary: Delete ClientContactCalendar by Id
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 613b7e3a-ae16-4959-b56b-405d68c339fd
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ClientContactCalendar
      summary: Get ClientContactCalendar by id
      operationId: GetByIdClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 94faafc9-17cf-4f93-85f3-8bf5c5e15ef8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ClientContactCalendar
      summary: Update part of ClientContactCalendar
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ClientContactCalendar/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fe586eb6-431c-4038-ac4a-f3743d505e71
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ClientContactCalendar
      summary: Update ClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a1686c1b-fd8a-4331-924d-a5c037968741
      requestBody:
        description: ClientContactCalendar to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientContactCalendarRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/all:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2019325a-5cd6-44bc-8343-2d812b7e99e3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/paged:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter with pagination
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1b9f76d9-25c8-4c4e-a29b-b04272af31e1
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar:
    post:
      tags:
        - ClientContactCalendar
      summary: Create ClientContactCalendar
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7decacfd-c189-4509-8089-919a6736aa4d
      requestBody:
        description: ClientContactCalendar to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientContactCalendarRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/{id}:
    delete:
      tags:
        - Commission
      summary: Delete Commission by Id
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c09aab6f-9f45-4004-a902-7d18b8165515
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Commission
      summary: Get Commission by id
      operationId: GetByIdCommission
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a0c3110b-bd59-43b5-8682-fb302a2d1d9f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Commission
      summary: Update part of Commission
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Commission/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fa23af98-527d-4f82-bbba-7860fa8acdba
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Commission
      summary: Update Commission
      parameters:
        - name: id
          in: path
          description: Commission Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8b315a40-07a5-4d9a-8ecf-69986d96378b
      requestBody:
        description: Commission to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommissionRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/all:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5111b431-5f56-4673-8d75-76176c414a4a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/paged:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter with pagination
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d60ad7b4-eb50-4aed-9306-0e696ebc5fae
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions:
    post:
      tags:
        - Commission
      summary: Create Commission
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 48532707-53d0-48d1-90d3-2327fa68a4fd
      requestBody:
        description: Commission to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommissionRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/{id}:
    delete:
      tags:
        - Company
      summary: Delete Company by Id
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 439f4a19-5c8e-40d0-bf30-2f53c030226b
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Company
      summary: Get Company by id
      operationId: GetByIdCompany
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b667fe66-b744-417d-ab68-e2acf9765fa1
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Company
      summary: Update part of Company
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Company/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d4eeaa97-1528-4baa-92d9-f4f987b582c8
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Company
      summary: Update Company
      parameters:
        - name: id
          in: path
          description: Company Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6fbf022f-53f1-45fc-a31b-dbc688fbf60c
      requestBody:
        description: Company to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/all:
    get:
      tags:
        - Company
      summary: Get All Company by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2ed6e0cf-051a-4fd1-a274-656405ac1568
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/paged:
    get:
      tags:
        - Company
      summary: Get All Company by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9d21e536-f876-4347-bb03-f47b3b03819f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies:
    post:
      tags:
        - Company
      summary: Create Company
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4f88f7f9-dc9a-4361-9d4b-fe7362452720
      requestBody:
        description: Company to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/{id}:
    delete:
      tags:
        - CompanyGlobalParameter
      summary: Delete CompanyGlobalParameter by Id
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ab7362fa-e756-4405-bc95-89e9c9e7e399
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get CompanyGlobalParameter by id
      operationId: GetByIdCompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 448e5d47-4d28-4083-b099-6e6ff35a8b0b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - CompanyGlobalParameter
      summary: Update part of CompanyGlobalParameter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/CompanyGlobalParameter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0c2fc153-59c3-4295-88bd-096b4f41ea86
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - CompanyGlobalParameter
      summary: Update CompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ba103d9d-ee25-4465-a114-edea5138bb4a
      requestBody:
        description: CompanyGlobalParameter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyGlobalParameterRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/all:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1a047cb5-85a0-4c6f-b0d8-946f905c63dc
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/paged:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4d69bcc7-3a91-4bbd-96b9-3c356cb01cf4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters:
    post:
      tags:
        - CompanyGlobalParameter
      summary: Create CompanyGlobalParameter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 66b86e33-b95e-4c01-aeb7-d64e7b1a03ed
      requestBody:
        description: CompanyGlobalParameter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyGlobalParameterRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderstatus:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: db307d2f-6cde-4de6-91de-3313720d55f8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderbysalesman:
    get:
      tags:
        - Dashboard
      summary: Get GetPurchaseOrderBySalesman
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 98e100ef-8afb-4751-a5c5-54fc27a5c4fd
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderfavoriteproducts:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d352708b-8522-4cd4-8cb7-7516cf392d79
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderlastsixmonths:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bcb81153-303d-4f48-9e5b-a563164690ce
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/widgets:
    get:
      tags:
        - Dashboard
      summary: Get Widgets
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 06484251-e80b-4f3d-beba-14c63d1abbd7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWidgetsDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/{id}:
    delete:
      tags:
        - DiscountRule
      summary: Delete DiscountRule by Id
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b4e58205-5285-4a27-b0b0-753a586707a2
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountRule
      summary: Get DiscountRule by id
      operationId: GetByIdDiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 30c8d809-7420-4b06-8913-73ad665a2f70
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountRule
      summary: Update part of DiscountRule
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountRule/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fe511a17-ea4f-438f-9378-26e20717c946
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountRule
      summary: Update DiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d290bacc-c524-4d62-8f15-42ee862aa58c
      requestBody:
        description: DiscountRule to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountRuleRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/all:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8e322245-97c0-4812-8b6b-9757892ce106
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/paged:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter with pagination
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f48c08c0-0e63-4b0a-a841-09b8a287455a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules:
    post:
      tags:
        - DiscountRule
      summary: Create DiscountRule
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e949c5b9-0849-4954-9826-e1fa4c47ce4c
      requestBody:
        description: DiscountRule to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountRuleRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/{id}:
    delete:
      tags:
        - DiscountWeight
      summary: Delete DiscountWeight by Id
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92ed207b-b732-4dcb-82f3-827308f13a5a
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountWeight
      summary: Get DiscountWeight by id
      operationId: GetByIdDiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7bbbfe24-7e58-4660-ad28-278befacca52
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountWeight
      summary: Update part of DiscountWeight
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountWeight/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 61efbc56-a2c3-4da1-83e8-b5639a9ea045
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountWeight
      summary: Update DiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 577b00da-39f7-4d78-a26e-9bc4387578eb
      requestBody:
        description: DiscountWeight to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountWeightRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/all:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 378ff8a8-34c6-432f-8f10-9fe878c88d5a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/paged:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter with pagination
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4d605c95-25a7-4b93-ab17-5f42907398b8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights:
    post:
      tags:
        - DiscountWeight
      summary: Create DiscountWeight
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 62424cd6-3694-469d-82ea-5cb1498e81e9
      requestBody:
        description: DiscountWeight to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountWeightRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/{id}:
    delete:
      tags:
        - DistribuitionCenter
      summary: Delete DistribuitionCenter by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1baa83a1-314c-4356-b5ac-8c4217de47a8
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenter
      summary: Get DistribuitionCenter by id
      operationId: GetByIdDistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3818c40c-2cc7-48b1-b9bb-2a6514a374b2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenter
      summary: Update part of DistribuitionCenter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cdcf09c0-f1b2-4ce3-8040-3eddea37fb19
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenter
      summary: Update DistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c0559cb9-a04e-4f96-8636-fae802851442
      requestBody:
        description: DistribuitionCenter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/all:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a0138d90-7ab2-4ef1-8b45-38f4b1a45f95
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/paged:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 65d62f2a-a24d-4de1-8698-dc3be55f363c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters:
    post:
      tags:
        - DistribuitionCenter
      summary: Create DistribuitionCenter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 539f103e-7f87-4a60-9515-a68199b14bc3
      requestBody:
        description: DistribuitionCenter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/{id}:
    delete:
      tags:
        - DistribuitionCenterClientAddress
      summary: Delete DistribuitionCenterClientAddress by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d455752b-58ad-4d57-9459-1e79e4b71cb3
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get DistribuitionCenterClientAddress by id
      operationId: GetByIdDistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5f31051d-baa5-49e7-8509-ef00d494aa57
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update part of DistribuitionCenterClientAddress
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenterClientAddress/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 72cea4d6-fe7f-4bb1-abd4-df52f4437958
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update DistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 57d366fd-bbe5-4584-89f3-a70edb051785
      requestBody:
        description: DistribuitionCenterClientAddress to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterClientAddressRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/all:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 00a4ce41-acb7-4ff2-89d2-253221a3165c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/paged:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter with pagination
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2a9de5a4-a23f-45c3-b1b5-3f6e6b638520
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress:
    post:
      tags:
        - DistribuitionCenterClientAddress
      summary: Create DistribuitionCenterClientAddress
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b5d2f220-74c0-4fdb-870c-6dcd8844034c
      requestBody:
        description: DistribuitionCenterClientAddress to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterClientAddressRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/{id}:
    delete:
      tags:
        - FreightConversionFactor
      summary: Delete FreightConversionFactor by Id
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2791d104-a553-4ae6-abcc-de3b1a4d77ba
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightConversionFactor
      summary: Get FreightConversionFactor by id
      operationId: GetByIdFreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6e83065e-c599-4663-b94b-d79c8f7dd8ae
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightConversionFactor
      summary: Update part of FreightConversionFactor
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightConversionFactor/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0e796039-524f-4fd5-847d-1e5af7e8ac45
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightConversionFactor
      summary: Update FreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1597928a-93d0-47c5-ad62-24e10765a572
      requestBody:
        description: FreightConversionFactor to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightConversionFactorRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/all:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6c30e04e-4695-413d-82c1-cf8685b09428
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/paged:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter with pagination
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 822658c9-6909-4b38-8681-da81a934b570
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors:
    post:
      tags:
        - FreightConversionFactor
      summary: Create FreightConversionFactor
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1fba6a3a-093e-47b1-a7e1-7dbbec3d8690
      requestBody:
        description: FreightConversionFactor to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightConversionFactorRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/{id}:
    delete:
      tags:
        - FreightTable
      summary: Delete FreightTable by Id
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0bafbb57-fba9-4eeb-b515-7fdffd2ee3a9
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightTable
      summary: Get FreightTable by id
      operationId: GetByIdFreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 349de8f5-fd38-434e-9b66-b03e2bc15949
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightTable
      summary: Update part of FreightTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7be75bf1-0103-4864-b6ff-d46fd24be915
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightTable
      summary: Update FreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 58668194-a929-4930-9d2d-b30e08cf7dbb
      requestBody:
        description: FreightTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/all:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3380a2ff-d092-4725-9665-b37bb6bfb97a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/paged:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 558cb438-e453-46b1-a331-8655767ad9fd
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables:
    post:
      tags:
        - FreightTable
      summary: Create FreightTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d29935db-9493-4869-a470-71ded7eb094a
      requestBody:
        description: FreightTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/{id}:
    delete:
      tags:
        - IntegrationConfig
      summary: Delete IntegrationConfig by Id
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 568d30b0-d749-4c5a-95bb-814b3083a238
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationConfig
      summary: Get IntegrationConfig by id
      operationId: GetByIdIntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d522bb80-f708-4024-af8c-ca94c39ebfe3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationConfig
      summary: Update part of IntegrationConfig
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationConfig/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 49b99c76-bf2b-431b-bf2c-2536a6592cb2
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationConfig
      summary: Update IntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 00cabc9e-eeb7-4ab6-9327-2b3056f7ba91
      requestBody:
        description: IntegrationConfig to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationConfigRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/all:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter
      parameters:
        - name: model
          in: query
          description: filter
          schema:
            $ref: '#/components/schemas/GetAllIntegrationConfigRequest'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4aaae906-5183-448d-b8e3-c9c8ca691e58
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/paged:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fad87428-a078-41da-a7b3-10645005ef3d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config:
    post:
      tags:
        - IntegrationConfig
      summary: Create IntegrationConfig
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 475fead8-79b5-41da-8b31-9432b85ea5b1
      requestBody:
        description: IntegrationConfig to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationConfigRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/{id}:
    delete:
      tags:
        - IntegrationStatus
      summary: Delete IntegrationStatus by Id
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0a02b9d2-935e-40f5-bf7c-0739ada5f8b3
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationStatus
      summary: Get IntegrationStatus by id
      operationId: GetByIdIntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a722c111-abf1-4192-ac94-208f45a79012
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationStatus
      summary: Update part of IntegrationStatus
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationStatus/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5b8a678f-1f61-4b3e-9a61-313a279f2e42
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationStatus
      summary: Update IntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d4f6cb7b-a315-409e-ace4-1311e2a7218d
      requestBody:
        description: IntegrationStatus to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationStatusRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/all:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a9aa9623-0108-4088-875e-bcd4b7846e6a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/paged:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter with pagination
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5a78f122-e873-4644-8242-2438de03f388
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status:
    post:
      tags:
        - IntegrationStatus
      summary: Create IntegrationStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4324abdf-f436-472b-8715-d5595d1fec22
      requestBody:
        description: IntegrationStatus to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationStatusRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications/{id}:
    delete:
      tags:
        - Notification
      summary: Delete Notification by Id
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a45dfc92-5ab7-4c55-ae86-da46a71d3531
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Notification
      summary: Get Notification by id
      operationId: GetByIdNotification
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: be3d0db3-da48-4e45-a02c-d3721b3c5f33
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Notification
      summary: Update part of Notification
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Notification/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f8188be5-2f2b-4b72-bbe5-701773007f39
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Notification
      summary: Update Notification
      parameters:
        - name: id
          in: path
          description: Notification Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 43c2b0e2-3a2b-4b0e-b07f-ffb3bce75f7b
      requestBody:
        description: Notification to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNotificationRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications:
    get:
      tags:
        - Notification
      summary: Get All Notification by filter with pagination
      parameters:
        - name: message
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/NotificationType'
        - name: userPhone
          in: query
          schema:
            type: string
        - name: userName
          in: query
          schema:
            type: string
        - name: userEmail
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 71851664-0ca6-49a0-a813-7facf8264132
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    post:
      tags:
        - Notification
      summary: Create Notification
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 95f6cf64-637f-42a5-a412-3b4ed000eb04
      requestBody:
        description: Notification to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotificationRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/{id}:
    delete:
      tags:
        - PaymentCondition
      summary: Delete PaymentCondition by Id
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 751fdcf0-0938-4032-8e2e-1404bae76815
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentCondition
      summary: Get PaymentCondition by id
      operationId: GetByIdPaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d28f4d3d-07c5-432b-9c7f-938c6ffeecdd
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentCondition
      summary: Update part of PaymentCondition
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentCondition/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 90504591-d05e-404c-b1ee-e701e7e844d9
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentCondition
      summary: Update PaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 49161253-a079-49c9-ae19-f88a74d9ab46
      requestBody:
        description: PaymentCondition to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentConditionRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/paged:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: decd913b-5cd9-4b65-9587-3c15219fcbc3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/all:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8b0a4871-56bb-4dfa-93ef-175c739600e6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions:
    post:
      tags:
        - PaymentCondition
      summary: Create PaymentCondition
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 70a3bdc0-f803-43a2-8c7e-918bd7e6ddc6
      requestBody:
        description: PaymentCondition to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentConditionRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/{id}:
    delete:
      tags:
        - PaymentPriceTable
      summary: Delete PaymentPriceTable by Id
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9d9d019f-f11b-4220-a52b-366d596e7a18
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentPriceTable
      summary: Get PaymentPriceTable by id
      operationId: GetByIdPaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: df7040b4-bd32-4c82-b3c7-e4217bd4c2a7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentPriceTable
      summary: Update part of PaymentPriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentPriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ced58d96-926a-4c57-b648-fc36de8fd3da
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentPriceTable
      summary: Update PaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 69657df4-64dd-4290-a447-fec60d48c607
      requestBody:
        description: PaymentPriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentPriceTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/paged:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter with pagination
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1d808d6f-3184-4b5a-ba5e-b677739bd043
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/all:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5534831d-9882-413b-9aa0-3135d442078e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables:
    post:
      tags:
        - PaymentPriceTable
      summary: Create PaymentPriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: aa7e7321-03d3-40e8-80b7-f502ce84a2b0
      requestBody:
        description: PaymentPriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentPriceTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/{id}:
    delete:
      tags:
        - PriceTable
      summary: Delete PriceTable by Id
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d91d2468-59dd-4072-b508-29c85fa92d8b
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTable
      summary: Get PriceTable by id
      operationId: GetByIdPriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c320d841-b933-4e96-b97e-783158309cf3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTable
      summary: Update part of PriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5bd6d38b-9c74-4787-b502-4bf48cce5b73
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTable
      summary: Update PriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c2b0034e-20f2-491f-a9b2-21328d708d36
      requestBody:
        description: PriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/paged:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0cbcce82-1509-4078-a7b4-ac474a5d0982
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/all:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b8635f55-8988-4698-8d41-9ce8d54f5410
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables:
    post:
      tags:
        - PriceTable
      summary: Create PriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f1006444-1114-4074-a8ef-15bf34df49f7
      requestBody:
        description: PriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/{id}:
    delete:
      tags:
        - PriceTableItem
      summary: Delete PriceTableItem by Id
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1e42a133-c8c0-4486-96c9-f260b7e622b2
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableItem
      summary: Get PriceTableItem by id
      operationId: GetByIdPriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c08d807d-02d8-4360-96b4-f506e3bcf28f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableItem
      summary: Update part of PriceTableItem
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableItem/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 04f65a64-a3d5-4c30-a1c4-d950e3b460a3
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableItem
      summary: Update PriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8e510c75-3881-4ee4-8be2-22e0b4b2636c
      requestBody:
        description: PriceTableItem to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableItemRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/paged:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter with pagination
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5e755510-f33a-4efb-9b69-a7fe7b6c445f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/all:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0799c509-d1d9-488f-86e5-6edede0d0717
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems:
    post:
      tags:
        - PriceTableItem
      summary: Create PriceTableItem
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 400ac844-63d2-4b51-a67d-8cb54e70380a
      requestBody:
        description: PriceTableItem to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableItemRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/{id}:
    delete:
      tags:
        - PriceTableUnloading
      summary: Delete PriceTableUnloading by Id
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 827d3b08-fd42-444a-9976-63daa19eaf93
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableUnloading
      summary: Get PriceTableUnloading by id
      operationId: GetByIdPriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f3530080-47fe-4cbc-94b7-8095d8f57668
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableUnloading
      summary: Update part of PriceTableUnloading
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableUnloading/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a6e295ac-e8a7-4b95-b00a-345e88913b60
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableUnloading
      summary: Update PriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: de8ac52a-28be-42c1-bcc4-80338abea34b
      requestBody:
        description: PriceTableUnloading to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableUnloadingRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/paged:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter with pagination
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f062058d-ef66-48ef-92e0-47a448d947ca
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/all:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3969938b-3b05-44b7-96b4-9c2c8a6c5cbe
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading:
    post:
      tags:
        - PriceTableUnloading
      summary: Create PriceTableUnloading
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 64523d4d-746f-4be1-a494-56eccd6872e8
      requestBody:
        description: PriceTableUnloading to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableUnloadingRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/{id}:
    delete:
      tags:
        - Product
      summary: Delete Product by Id
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b3a4677e-06a4-4314-8875-a523c51086fa
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Product
      summary: Get Product by id
      operationId: GetByIdProduct
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a26339d4-c472-4747-8e5c-b6f2e6563b30
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Product
      summary: Update part of Product
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Product/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 725e196c-54d8-469b-9255-b83ed98e9003
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Product
      summary: Update Product
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6c8580ef-5f62-4ab5-b197-235a4112a7b9
      requestBody:
        description: Product to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/paged:
    get:
      tags:
        - Product
      summary: Get All Product by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5407f4ca-ca4e-49d6-8c02-f5e2ffe46f8a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/all:
    get:
      tags:
        - Product
      summary: Get All Product by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6e181cf3-a654-41e6-82d7-4ac46ced5305
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products:
    post:
      tags:
        - Product
      summary: Create Product
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 37f4c769-2d6a-4545-a96c-5b44b1ebc4e2
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/{id}:
    delete:
      tags:
        - ProductGroup
      summary: Delete ProductGroup by Id
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a208b2d4-3390-4e13-ad5f-9351334b7671
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by id
      operationId: GetByIdProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8cd0f98d-e0e4-4efc-bcc6-dde47e191b77
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductGroup
      summary: Update part of ProductGroup
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductGroup/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9b084932-4ab6-41a2-aec9-a128e13c881b
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductGroup
      summary: Update ProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c9ffa20d-b31f-43c9-9176-f5b403eb2f28
      requestBody:
        description: ProductGroup to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductGroupRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/paged:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 93ea9fdb-41e0-46fb-b070-7c4f042d22b7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/all:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 669de965-908e-40a8-9210-fbb519243aea
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/integration/{externalCode}:
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by external Code
      operationId: GetByExternalCodeProductGroupController
      parameters:
        - name: externalCode
          in: path
          description: ProductGroup external code
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3dff949a-1a28-45d6-a662-79a59e628057
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups:
    post:
      tags:
        - ProductGroup
      summary: Create ProductGroup
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 222abf8c-0386-433e-870a-a50a89acdd2c
      requestBody:
        description: ProductGroup to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductGroupRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/{id}:
    delete:
      tags:
        - ProductLine
      summary: Delete ProductLine by Id
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 08752782-945b-4716-9a84-99f53027808d
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductLine
      summary: Get ProductLine by id
      operationId: GetByIdProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9dd16045-7a25-41af-a25a-49b32e834538
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductLine
      summary: Update part of ProductLine
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductLine/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f991ce85-81da-4f62-9af6-f9ebbc681caf
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductLine
      summary: Update ProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f56f15aa-4c1d-44f7-8474-5fade9a74b27
      requestBody:
        description: ProductLine to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductLineRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/paged:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e3407232-6cf0-4095-b54f-a29708dc3ad2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/all:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9217789e-e49b-4f65-b974-41f35b61ccde
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines:
    post:
      tags:
        - ProductLine
      summary: Create ProductLine
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: daa95eac-ab9e-4d33-a594-113815e22ca6
      requestBody:
        description: ProductLine to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductLineRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}:
    delete:
      tags:
        - PurchaseOrder
      summary: Delete PurchaseOrder by Id
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e21db85b-8b2d-4f1d-9c87-81e1a19576f0
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PurchaseOrder
      summary: Get PurchaseOrder by id
      operationId: GetByIdPurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8ed45aab-7a2b-45de-8de2-70615ae8948b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PurchaseOrder
      summary: Update part of PurchaseOrder
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PurchaseOrder/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 474a80cc-b96b-440f-9044-fad2839ff212
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PurchaseOrder
      summary: Update PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 643ed719-38bc-4229-b3dd-a9efdf1d041e
      requestBody:
        description: PurchaseOrder to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPurchaseOrderRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/paged:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter with pagination
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0dc8565a-4483-47a9-889d-4fe02c50e167
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/all:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e242c5a9-7cdc-4a9b-89c3-476ad0cde465
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/approve:
    post:
      tags:
        - PurchaseOrder
      summary: Approve PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 379ee7f8-3d12-4910-b1ca-edb19f464bee
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/cancel:
    post:
      tags:
        - PurchaseOrder
      summary: Cancel PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a811c104-2c96-411f-9064-3d5c770635ef
      requestBody:
        description: PostCancelPurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCancelPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders:
    post:
      tags:
        - PurchaseOrder
      summary: Create PurchaseOrder
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 52421681-2424-47ab-9196-c1480c8ac9ea
      requestBody:
        description: PurchaseOrder to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPurchaseOrderRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/refused:
    post:
      tags:
        - PurchaseOrder
      summary: Refused PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 145ec8e2-42a5-4c6e-97d1-8286e6740117
      requestBody:
        description: Post Refused PurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRefusedPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/sendtoapprove:
    post:
      tags:
        - PurchaseOrder
      summary: SendToApprove PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: areaManagerCode
          in: query
          description: Area Manager Code
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bb41ec44-6995-4646-92c1-481f3c9f20ae
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/{id}:
    delete:
      tags:
        - ReasonCancel
      summary: Delete ReasonCancel by Id
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5a0e5326-d673-4f5d-905f-9f5066f540ba
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonCancel
      summary: Get ReasonCancel by id
      operationId: GetByIdReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a26ecf3a-ef6e-47cf-90b6-84b86f71d7ed
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonCancel
      summary: Update part of ReasonCancel
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonCancel/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d49c6762-03e5-4028-86a2-64f9afcd346f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonCancel
      summary: Update ReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 288dc5f1-6bf8-411e-9f5a-e3b26715c2f5
      requestBody:
        description: ReasonCancel to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonCancelRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/paged:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f5ff422b-8b34-4dbb-8848-b5067a7f025f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/all:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2347d7e2-c580-4803-b8a5-74c6aa92ef71
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels:
    post:
      tags:
        - ReasonCancel
      summary: Create ReasonCancel
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fdbd7096-0838-459d-9eaf-2150b4f3917b
      requestBody:
        description: ReasonCancel to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonCancelRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/{id}:
    delete:
      tags:
        - ReasonVisit
      summary: Delete ReasonVisit by Id
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8943a47d-1fa8-4f51-b041-077b6c2f88da
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonVisit
      summary: Get ReasonVisit by id
      operationId: GetByIdReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 919316e1-e6bb-4799-895d-8d214e6feae2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonVisit
      summary: Update part of ReasonVisit
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonVisit/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bb35f0f2-7ac1-46cc-bb8f-2536844d7724
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonVisit
      summary: Update ReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1e6e2ed5-6f12-4fdf-bcfe-0ff0e44f51f5
      requestBody:
        description: ReasonVisit to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonVisitRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/paged:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter with pagination
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f249320f-d090-42a7-994b-d5d28f8e0f8b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/all:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3f6af908-0b07-44b6-ad5c-6a9a66870107
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits:
    post:
      tags:
        - ReasonVisit
      summary: Create ReasonVisit
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2ff122ab-4c1a-48fd-bd4d-7866826b0570
      requestBody:
        description: ReasonVisit to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonVisitRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/{id}:
    delete:
      tags:
        - Template
      summary: Delete Template by Id
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 976b0294-0834-433c-b4c2-c5aeb1acbcde
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Template
      summary: Get Template by id
      operationId: GetByIdTemplate
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f67a1c25-30d4-48b2-8450-cd5526dcc484
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Template
      summary: Update part of Template
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Template/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7a4cfa32-c576-4ba5-bf90-d14737706732
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Template
      summary: Update Template
      parameters:
        - name: id
          in: path
          description: Template Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5036b505-c336-4b5b-a504-fab5ea8842bb
      requestBody:
        description: Template to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTemplateRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/paged:
    get:
      tags:
        - Template
      summary: Get All Template by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e46f3fdd-1e7c-4502-86fe-95c5913afee0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/all:
    get:
      tags:
        - Template
      summary: Get All Template by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f8ec4a0b-5d8c-4ea5-b6a2-fe3c1186cfa2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates:
    post:
      tags:
        - Template
      summary: Create Template
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1a05afca-03c8-4da6-8f2c-be60ea3b398c
      requestBody:
        description: Template to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTemplateRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/{id}:
    delete:
      tags:
        - User
      summary: Delete User by Id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 74004d73-4d78-4ecf-a215-dfa3212159d5
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - User
      summary: Get User by id
      operationId: GetByIdUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a81a816a-41bd-4f15-9053-eba0842b5d52
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - User
      summary: Update part of User
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/User/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a41aa81-47d9-4e44-80e6-91e3b8311242
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - User
      summary: Update User
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a15b4ce-464c-4d5e-9767-377affc53828
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/paged:
    get:
      tags:
        - User
      summary: Get All User by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2f571f88-1630-4692-8eab-c01a9f423aab
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/all:
    get:
      tags:
        - User
      summary: Get All User by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d06104ff-3451-41f0-808c-cdb8b34e9594
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/userinfo:
    get:
      tags:
        - User
      summary: Get User Info
      operationId: GetUserInfo
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5076b59b-3111-4445-9cc1-6ea4bb359d47
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d4003337-197c-435b-b70b-d32c98b0688c
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/forcerchangepassword:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e7840d0d-255e-451e-aa08-62db28a1514a
      requestBody:
        description: Force Change Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserForceChangePasswordRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/pushtoken:
    post:
      tags:
        - User
      summary: Add User Push Token
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f1a61cbc-eea9-4752-9839-53634caaaf50
      requestBody:
        description: FCM Token
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/reset_password:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 09d952c6-f2b4-4b87-bfce-f256fcabeaf2
      requestBody:
        description: Reset Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserResetPassword'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signin:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9ef52487-e421-43f1-8f78-982a2b940474
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserSignInRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserSignInResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signup:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e51fca00-0dbf-4f04-a607-2c36d9c715a9
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/{id}:
    delete:
      tags:
        - VehicleType
      summary: Delete VehicleType by Id
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3f2bb0ad-6e0b-410c-b015-bc36486df22f
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - VehicleType
      summary: Get VehicleType by id
      operationId: GetByIdVehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d85cba91-cc3f-4a01-b265-8c56345a5a2a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - VehicleType
      summary: Update part of VehicleType
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/VehicleType/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dd2cf2ce-aac6-4bf4-ab84-097823d39fbf
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - VehicleType
      summary: Update VehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8948816e-836b-44a9-b067-ee2412542f9d
      requestBody:
        description: VehicleType to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutVehicleTypeRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/paged:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 04df9138-3e5c-49fc-9cbe-c71fb9849b4d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/all:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 20aa571a-de82-4429-95fc-1c6357f41cdb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes:
    post:
      tags:
        - VehicleType
      summary: Create VehicleType
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 414aabbe-5ead-4d0c-a449-fc6c13c8193a
      requestBody:
        description: VehicleType to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVehicleTypeRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/version:
    get:
      tags:
        - Version
      summary: Get Version
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c0f1ca5e-6908-45e4-9298-45338bd2e08a
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
components:
  schemas:
    ActionType:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
          nullable: true
        longitude:
          type: number
          format: double
          nullable: true
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    AddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    AddressTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    ClientStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    CommissionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DatabaseCollector:
      type: object
      properties:
        outPutFolder:
          type: string
          nullable: true
        connection:
          $ref: '#/components/schemas/DatabaseConnection'
        queries:
          $ref: '#/components/schemas/DatabaseQueries'
      additionalProperties: false
    DatabaseConnection:
      type: object
      properties:
        name:
          type: string
          nullable: true
        server:
          type: string
          nullable: true
        port:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        commandTimeout:
          type: integer
          format: int32
        minPoolSize:
          type: integer
          format: int32
        maxPoolSize:
          type: integer
          format: int32
      additionalProperties: false
    DatabaseQueries:
      type: object
      properties:
        queryAddresses:
          type: string
          nullable: true
        queryAddressesIsEnable:
          type: boolean
        queryClients:
          type: string
          nullable: true
        queryClientsIsEnable:
          type: boolean
        queryFreightTables:
          type: string
          nullable: true
        queryFreightTablesIsEnable:
          type: boolean
        queryPaymentConditions:
          type: string
          nullable: true
        queryPaymentConditionsIsEnable:
          type: boolean
        queryPaymentPriceTables:
          type: string
          nullable: true
        queryPaymentPriceTablesIsEnable:
          type: boolean
        queryPriceTableItems:
          type: string
          nullable: true
        queryPriceTableItemsIsEnable:
          type: boolean
        queryPriceTables:
          type: string
          nullable: true
        queryPriceTablesIsEnable:
          type: boolean
        queryProductGroups:
          type: string
          nullable: true
        queryProductGroupsIsEnable:
          type: boolean
        queryProductLines:
          type: string
          nullable: true
        queryProductLinesIsEnable:
          type: boolean
        queryProducts:
          type: string
          nullable: true
        queryProductsIsEnable:
          type: boolean
        queryUsers:
          type: string
          nullable: true
        queryUsersIsEnable:
          type: boolean
        queryVehicleTypes:
          type: string
          nullable: true
        queryVehicleTypesIsEnable:
          type: boolean
        queryDistribuitionCenterClientAddress:
          type: string
          nullable: true
        queryDistribuitionCenterClientAddressIsEnable:
          type: boolean
        queryFreightConversionFactor:
          type: string
          nullable: true
        queryFreightConversionFactorIsEnable:
          type: boolean
        queryDiscountRule:
          type: string
          nullable: true
        queryDiscountRuleIsEnable:
          type: boolean
        queryCommission:
          type: string
          nullable: true
        queryCommissionIsEnable:
          type: boolean
        queryReasonCancel:
          type: string
          nullable: true
        queryReasonCancelIsEnable:
          type: boolean
        queryPriceTableUnloading:
          type: string
          nullable: true
        queryPriceTableUnloadingIsEnable:
          type: boolean
      additionalProperties: false
    DiscountRuleStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DiscountTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DiscountWeightTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DistribuitionCenterClientAddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DocumentVersion:
      type: object
      additionalProperties: false
    ErrorDetails:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: string
          nullable: true
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FreightComposition:
      type: object
      properties:
        vehicleType:
          $ref: '#/components/schemas/VehicleType'
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightCompositionModel:
      type: object
      properties:
        vehicleTypeId:
          type: string
          format: uuid
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightConversionFactorStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightType:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    GetAllAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    GetAllAuditResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        entity:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ActionType'
        data:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    GetAllCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    GetAllCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    GetAllCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    GetAllDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    GetAllDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    GetAllDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    GetAllDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    GetAllFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    GetAllFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    GetAllIntegrationConfigRequest:
      type: object
      additionalProperties: false
    GetAllIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    GetAllIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    GetAllNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllPagedAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedAuditResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAuditResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientContactCalendarResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCommissionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCommissionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyGlobalParameterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountRuleResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountRuleResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountWeightResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountWeightResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightConversionFactorResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationConfigResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationStatusResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedNotificationResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllNotificationResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentConditionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentConditionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableItemResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableItemResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableUnloadingResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductGroupResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductGroupResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductLineResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductLineResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPurchaseOrderResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonCancelResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonCancelResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonVisitResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonVisitResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedTemplateResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllTemplateResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedUserResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllUserResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedVehicleTypeResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllVehicleTypeResponse'
          nullable: true
      additionalProperties: false
    GetAllPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    GetAllPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    GetAllPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    GetAllPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    GetAllPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    GetAllProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    GetAllProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    GetAllProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    GetAllPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightComposition'
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        reasonCancel:
          $ref: '#/components/schemas/ReasonCancel'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    GetAllReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    GetAllReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    GetAllTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    GetAllUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    GetAllVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    GetWidgetsDto:
      type: object
      properties:
        totalOrders:
          type: integer
          format: int64
        totalUsers:
          type: integer
          format: int64
        totalProducts:
          type: integer
          format: int64
        totalClients:
          type: integer
          format: int64
      additionalProperties: false
    GroupPurchaseOrderDto:
      type: object
      properties:
        totalInProgress:
          type: integer
          format: int64
        totalWaitingForApproved:
          type: integer
          format: int64
        totalApproved:
          type: integer
          format: int64
        totalRefused:
          type: integer
          format: int64
        totalCanceled:
          type: integer
          format: int64
        totalExpired:
          type: integer
          format: int64
      additionalProperties: false
    IntegrationStatusActions:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
    NotificationChannel:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    NotificationType:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    Operation:
      type: object
      properties:
        operationType:
          $ref: '#/components/schemas/OperationType'
        path:
          type: string
          nullable: true
        op:
          type: string
          nullable: true
        from:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    OperationType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PaymentCondition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PaymentConditionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PaymentPriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PostAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostCancelPurchaseOrderRequest:
      type: object
      properties:
        reasonCancelId:
          type: string
          format: uuid
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PostClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PostClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    PostNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PostPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PostPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    PostReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostRefusedPurchaseOrderRequest:
      type: object
      properties:
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostUserForceChangePasswordRequest:
      required:
        - defaultPassword
        - email
      type: object
      properties:
        email:
          minLength: 1
          type: string
        defaultPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserPushTokenRequest:
      required:
        - deviceId
        - token
      type: object
      properties:
        token:
          minLength: 1
          type: string
        deviceId:
          minLength: 1
          type: string
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
      additionalProperties: false
    PostUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        password:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResetPassword:
      required:
        - email
        - newPassword
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        newPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserResetPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PostUserSignInRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserSignInResponse:
      type: object
      properties:
        token:
          type: string
          nullable: true
        expiresIn:
          type: number
          format: double
      additionalProperties: false
    PostVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PostVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PriceTableItemStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableUnloadingStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
      additionalProperties: false
    ProductEspecification:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    ProductGroupStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductLineStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PurchaseOrderHistory:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
        date:
          type: string
          format: date-time
        summary:
          type: string
          nullable: true
        userId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    PurchaseOrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderItemModelBase:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderStatus:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PushToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        deviceId:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PushTokenStatus'
      additionalProperties: false
    PushTokenStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PutAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PutClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PutClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PutCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PutCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PutCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PutDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PutDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PutDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PutDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PutFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PutFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PutIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PutIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PutNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PutPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PutPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PutPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PutPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PutPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PutProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PutProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PutProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PutPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PutReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PutReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PutTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PutUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PutVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    ReasonCancel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    ReasonCancelStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ReferenceTypeEnum:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    TablePriceOperationTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    UnitMeasurementTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isSuperAdmin:
          type: boolean
        isAdmin:
          type: boolean
        isRegionManager:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        forceChangePassword:
          type: boolean
        pushTokens:
          type: array
          items:
            $ref: '#/components/schemas/PushToken'
          nullable: true
      additionalProperties: false
    UserStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    VehicleType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    VehicleTypeStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\""
      name: Authorization
      in: header
security:
  - Bearer: []
