openapi: 3.0.1
info:
  title: Tep.Sales.Service API
  description: Tep.Sales.Service API
  termsOfService: https://github.com/
  contact:
    name: Administrator
    url: https://github.com/jefersonmlopes
    email: admin@tecnoepec.com.br
  license:
    name: Use under MIT License
    url: https://github.com/
  version: v1
paths:
  /tepsales/v1/addresses/{id}:
    delete:
      tags:
        - Address
      summary: Delete Address by Id
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c34ecab4-9b89-4dbf-99ea-8fcfb4008b18
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Address
      summary: Get Address by id
      operationId: GetByIdAddress
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a00eec96-b826-48c7-89fe-2f99c1281d30
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Address
      summary: Update part of Address
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Address/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d9e7ed5f-3e2d-40b4-8ea8-f31b593f64c8
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Address
      summary: Update Address
      parameters:
        - name: id
          in: path
          description: Address Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1d381026-49aa-4f91-98fb-f552c3618cb9
      requestBody:
        description: Address to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAddressRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/all:
    get:
      tags:
        - Address
      summary: Get All Address by filter
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.asc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 23197447-99e4-4f2c-a23e-c18caee88e1e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/paged:
    get:
      tags:
        - Address
      summary: Get All Address by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d1ed9f8d-0dc6-49e1-a747-585169235d03
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses:
    post:
      tags:
        - Address
      summary: Create Address
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e19d8e44-a848-4f16-a4de-eb7a738d0340
      requestBody:
        description: Address to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAddressRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8b50e9d8-41a9-4478-bf12-4c67d3779d66
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits/latest:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b8dc5233-869f-4192-9eb2-37bbbb98e0d9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/{id}:
    delete:
      tags:
        - Client
      summary: Delete Client by Id
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 22ee57e0-a99b-4ae0-8e99-e60b173e1372
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Client
      summary: Get Client by id
      operationId: GetByIdClient
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6db1962f-c21b-4435-b55d-7bdfed973743
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Client
      summary: Update part of Client
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Client/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 19b74d66-00a8-415b-b37e-36e15b539cb7
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Client
      summary: Update Client
      parameters:
        - name: id
          in: path
          description: Client Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5694af5f-6d82-40f3-99e4-4445c7d7a0ac
      requestBody:
        description: Client to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/all:
    get:
      tags:
        - Client
      summary: Get All Client by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: be651887-16ae-4460-982a-17279ce579bb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/paged:
    get:
      tags:
        - Client
      summary: Get All Client by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bfe43263-fc03-425b-a27b-ee03c87334d3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients:
    post:
      tags:
        - Client
      summary: Create Client
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9164589f-5bea-48b7-8d23-452b9e733dd5
      requestBody:
        description: Client to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/{id}:
    delete:
      tags:
        - ClientContactCalendar
      summary: Delete ClientContactCalendar by Id
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3fdc69c4-1da7-4bab-b94e-698a5b094869
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ClientContactCalendar
      summary: Get ClientContactCalendar by id
      operationId: GetByIdClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d2e075a8-e28e-425b-9384-a4a1ff34d77a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ClientContactCalendar
      summary: Update part of ClientContactCalendar
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ClientContactCalendar/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 06f217ca-3f6f-493d-b61d-abe7313334a2
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ClientContactCalendar
      summary: Update ClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9dfb396e-5719-4800-b9ab-ea6548d3ccce
      requestBody:
        description: ClientContactCalendar to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientContactCalendarRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/all:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f34ff627-e1f4-497b-9db8-979c786f2ddc
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/paged:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter with pagination
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2da7e0d0-6968-43ef-89ba-7df571216a06
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar:
    post:
      tags:
        - ClientContactCalendar
      summary: Create ClientContactCalendar
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 27a96468-8218-475b-9832-3af598c1bc64
      requestBody:
        description: ClientContactCalendar to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientContactCalendarRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/{id}:
    delete:
      tags:
        - Commission
      summary: Delete Commission by Id
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 53f6fb5a-9002-481f-b630-5059032249bf
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Commission
      summary: Get Commission by id
      operationId: GetByIdCommission
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: eb417f5e-7a96-4e37-9c03-b23abd2b6452
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Commission
      summary: Update part of Commission
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Commission/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c99ff09f-c5d2-4fce-9bfa-f75e8a7a5790
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Commission
      summary: Update Commission
      parameters:
        - name: id
          in: path
          description: Commission Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: aff43237-180e-40e1-b190-25845b10cfb8
      requestBody:
        description: Commission to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommissionRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/all:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cdddc92f-13c4-4d90-a53e-06ee27c37517
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/paged:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter with pagination
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a64f926-9cb7-44aa-80bd-df1c1c106c4a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions:
    post:
      tags:
        - Commission
      summary: Create Commission
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5df2d6ac-0d30-47bc-8cef-dc7958d9e815
      requestBody:
        description: Commission to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommissionRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/{id}:
    delete:
      tags:
        - Company
      summary: Delete Company by Id
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: df8f5547-6377-4f25-9442-a498e3655700
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Company
      summary: Get Company by id
      operationId: GetByIdCompany
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 421dcc1b-f223-4a7b-a11a-67193e2f12d8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Company
      summary: Update part of Company
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Company/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 11d17591-61bb-4659-bd96-4a5b4873b3f5
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Company
      summary: Update Company
      parameters:
        - name: id
          in: path
          description: Company Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92674732-c60e-4678-bd00-c184e6bb4bfa
      requestBody:
        description: Company to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/all:
    get:
      tags:
        - Company
      summary: Get All Company by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ffe2e6e0-c3ab-4125-8e07-ac65f83ab338
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/paged:
    get:
      tags:
        - Company
      summary: Get All Company by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c6553f4d-f087-435e-b737-73b88039e7e8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies:
    post:
      tags:
        - Company
      summary: Create Company
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 48f355f0-5fb2-4e7d-b4f0-29af72616324
      requestBody:
        description: Company to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/{id}:
    delete:
      tags:
        - CompanyGlobalParameter
      summary: Delete CompanyGlobalParameter by Id
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0ed5061e-9286-4fab-92bf-7b4e6333be3e
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get CompanyGlobalParameter by id
      operationId: GetByIdCompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3265f82b-e18b-4cf7-9561-95fce9f320bf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - CompanyGlobalParameter
      summary: Update part of CompanyGlobalParameter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/CompanyGlobalParameter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8403924f-a11d-4735-b6ff-838c86e9ea21
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - CompanyGlobalParameter
      summary: Update CompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f23834b1-a4e4-4ed6-899b-b1e8d67d9cb6
      requestBody:
        description: CompanyGlobalParameter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyGlobalParameterRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/all:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5b1933a3-e7ef-48df-875e-6b2c3a20c2a9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/paged:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 08d12214-8b74-4655-a835-70306e6d0d7a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters:
    post:
      tags:
        - CompanyGlobalParameter
      summary: Create CompanyGlobalParameter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 838aa138-38c3-4ed6-8b08-cff7a8c4afa0
      requestBody:
        description: CompanyGlobalParameter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyGlobalParameterRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderstatus:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 805831d8-d000-4254-adc2-d8d3a284af6f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderbysalesman:
    get:
      tags:
        - Dashboard
      summary: Get GetPurchaseOrderBySalesman
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 07e16979-c7f7-41eb-b991-0e6ffa9b8665
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderfavoriteproducts:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 217135cb-8acd-4d58-ba7c-f71d8b676939
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderlastsixmonths:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bb28c529-f4af-4624-a565-e29576faf28b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/widgets:
    get:
      tags:
        - Dashboard
      summary: Get Widgets
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2fdb89d6-fc03-4978-ab93-fbd091038718
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWidgetsDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/{id}:
    delete:
      tags:
        - DiscountRule
      summary: Delete DiscountRule by Id
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 78a02214-577f-47b5-b709-1e3a895e6a0c
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountRule
      summary: Get DiscountRule by id
      operationId: GetByIdDiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0a08aa30-f600-450d-ac05-377d4610503e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountRule
      summary: Update part of DiscountRule
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountRule/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a09a7160-edb6-442a-83a0-2411b7892068
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountRule
      summary: Update DiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 84a538f5-9ae0-45e3-858e-5eab660cb585
      requestBody:
        description: DiscountRule to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountRuleRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/all:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a207b113-ff9a-4f31-a69d-501eee44ff10
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/paged:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter with pagination
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 72da3c6e-1759-4a40-8039-b038b4bddfe2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules:
    post:
      tags:
        - DiscountRule
      summary: Create DiscountRule
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 415be27e-d785-4b13-88cd-ce4c5caeefeb
      requestBody:
        description: DiscountRule to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountRuleRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/{id}:
    delete:
      tags:
        - DiscountWeight
      summary: Delete DiscountWeight by Id
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e76cdfe4-1e67-4aab-8e64-fa99901b58d8
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountWeight
      summary: Get DiscountWeight by id
      operationId: GetByIdDiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ebd1cb7f-b447-48f4-8cee-73ef263d08c4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountWeight
      summary: Update part of DiscountWeight
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountWeight/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 28e62054-5af1-4cd4-8327-0014a7f0267e
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountWeight
      summary: Update DiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 76dd748d-a887-4370-9e32-954b14542338
      requestBody:
        description: DiscountWeight to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountWeightRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/all:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ca0beb4e-23eb-4c2f-ba5d-91f1efd38b12
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/paged:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter with pagination
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 77da8bc8-ead7-46ba-bf50-53b9d1f6589b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights:
    post:
      tags:
        - DiscountWeight
      summary: Create DiscountWeight
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 98d04666-1e1a-47bd-ba2e-5847edca23c0
      requestBody:
        description: DiscountWeight to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountWeightRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/{id}:
    delete:
      tags:
        - DistribuitionCenter
      summary: Delete DistribuitionCenter by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5051b171-fba9-4afa-beaf-a4281f3d1f0b
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenter
      summary: Get DistribuitionCenter by id
      operationId: GetByIdDistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c45b806f-7860-410d-b9be-016216fd85d4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenter
      summary: Update part of DistribuitionCenter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 09f64312-dadc-44e5-80bc-4df7980278a7
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenter
      summary: Update DistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bcbade74-0007-4b3c-b9a4-aef2a632200b
      requestBody:
        description: DistribuitionCenter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/all:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ecc3eab9-a665-44b6-b1c2-bda1b47822c8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/paged:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 952a0363-b65e-4f63-bac7-d0a9ffcbc441
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters:
    post:
      tags:
        - DistribuitionCenter
      summary: Create DistribuitionCenter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 47309f9b-29b1-4c06-8f4e-69e1c3f9e66a
      requestBody:
        description: DistribuitionCenter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/{id}:
    delete:
      tags:
        - DistribuitionCenterClientAddress
      summary: Delete DistribuitionCenterClientAddress by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4606ca98-d12d-4c4e-91a7-87453da69e63
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get DistribuitionCenterClientAddress by id
      operationId: GetByIdDistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7e9baf0c-c333-4444-9b39-45da7b08db62
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update part of DistribuitionCenterClientAddress
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenterClientAddress/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f1fb6858-3adc-4b63-86bf-4c1cb7836ee7
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update DistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3871676e-a305-4cdc-becb-bdbb3fa5ae33
      requestBody:
        description: DistribuitionCenterClientAddress to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterClientAddressRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/all:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8c91495b-e4ad-4a5b-a22c-d947f6996698
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/paged:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter with pagination
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 52ad9d53-ce29-469e-98e7-ee147f1708b3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress:
    post:
      tags:
        - DistribuitionCenterClientAddress
      summary: Create DistribuitionCenterClientAddress
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 39071ee5-5685-4c5b-87db-008ffc90809f
      requestBody:
        description: DistribuitionCenterClientAddress to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterClientAddressRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterClientAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/{id}:
    delete:
      tags:
        - FreightConversionFactor
      summary: Delete FreightConversionFactor by Id
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: eff8c1b4-c061-4229-81c3-4856b9969cf4
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightConversionFactor
      summary: Get FreightConversionFactor by id
      operationId: GetByIdFreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7569145d-9d4e-4df1-a902-b98a3c47f1ad
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightConversionFactor
      summary: Update part of FreightConversionFactor
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightConversionFactor/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fe74e622-2d6b-47c7-8e4b-83363d1c7993
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightConversionFactor
      summary: Update FreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2d16ceb0-801b-4db6-bf80-2582162cb2dd
      requestBody:
        description: FreightConversionFactor to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightConversionFactorRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/all:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 031c303e-bb2f-4737-afc0-4f7c4b494e00
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/paged:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter with pagination
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 26770553-2d59-4d63-bb9f-17e621cfdbf2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors:
    post:
      tags:
        - FreightConversionFactor
      summary: Create FreightConversionFactor
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f9404ba0-c421-4165-beb1-78159d6bbc18
      requestBody:
        description: FreightConversionFactor to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightConversionFactorRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/{id}:
    delete:
      tags:
        - FreightTable
      summary: Delete FreightTable by Id
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b074dbb0-3afb-4316-8eb4-ba1b2f487d3d
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightTable
      summary: Get FreightTable by id
      operationId: GetByIdFreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c5f65ffc-452e-498a-ae07-a48d17566bc5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightTable
      summary: Update part of FreightTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 33dd5035-9813-4a4c-b8fd-7c4e19feaaa0
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightTable
      summary: Update FreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: eabbc1d9-7239-48eb-8126-47b86817dbee
      requestBody:
        description: FreightTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/all:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8f10cfa8-418d-408b-ace0-30b507db31c0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/paged:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 032e91cf-87c4-4b72-9dc8-300586970ce9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables:
    post:
      tags:
        - FreightTable
      summary: Create FreightTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 25a20672-a4e0-4f2e-81dd-4d9f2e404866
      requestBody:
        description: FreightTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/{id}:
    delete:
      tags:
        - IntegrationConfig
      summary: Delete IntegrationConfig by Id
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 552160be-9aaf-4977-ace5-3e0c012952c3
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationConfig
      summary: Get IntegrationConfig by id
      operationId: GetByIdIntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 846a68b8-ac8d-46dc-b96f-628323ce20c7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationConfig
      summary: Update part of IntegrationConfig
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationConfig/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3f52c9a1-95c6-487b-94ae-c7ad270b6b2f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationConfig
      summary: Update IntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bd244508-3a8c-4419-bd27-9b7f6605ea1d
      requestBody:
        description: IntegrationConfig to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationConfigRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/all:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter
      parameters:
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3a83d2af-4096-4208-b4a4-e1b673166258
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/paged:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 104f4b4d-631e-46f3-9152-ff883e8605c4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config:
    post:
      tags:
        - IntegrationConfig
      summary: Create IntegrationConfig
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9d2c3180-d36f-4a3c-a0ff-1e839cd3bdc0
      requestBody:
        description: IntegrationConfig to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationConfigRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/{id}:
    delete:
      tags:
        - IntegrationStatus
      summary: Delete IntegrationStatus by Id
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d3da7de8-2aa9-4f4f-a84c-4b925b0e5491
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationStatus
      summary: Get IntegrationStatus by id
      operationId: GetByIdIntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5e8505f9-df03-4381-b2f4-fed056ffd563
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationStatus
      summary: Update part of IntegrationStatus
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationStatus/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fe4737a8-0197-443c-8566-6e8b80cf1688
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationStatus
      summary: Update IntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 83b85fa8-0112-4fa8-8d5b-65dfea08db7e
      requestBody:
        description: IntegrationStatus to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationStatusRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/all:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1a4a1c1a-9af8-4e90-a266-78bf7b43a93c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/paged:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter with pagination
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 709c5231-63b9-415f-b58f-b596fbc08b0b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status:
    post:
      tags:
        - IntegrationStatus
      summary: Create IntegrationStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 62a6cda1-6205-4089-ab7d-627e3bacf010
      requestBody:
        description: IntegrationStatus to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationStatusRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications/{id}:
    delete:
      tags:
        - Notification
      summary: Delete Notification by Id
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5225e57e-f7be-405a-b0bf-74d04d7f68fd
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Notification
      summary: Get Notification by id
      operationId: GetByIdNotification
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 17e78cd6-ba9d-4223-9724-9720d7e08e54
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Notification
      summary: Update part of Notification
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Notification/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9de678ca-433d-4bdd-8be0-94bf479c336f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Notification
      summary: Update Notification
      parameters:
        - name: id
          in: path
          description: Notification Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d49fda33-b4f8-4d88-a8ed-368cc87ae229
      requestBody:
        description: Notification to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNotificationRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications:
    get:
      tags:
        - Notification
      summary: Get All Notification by filter with pagination
      parameters:
        - name: message
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/NotificationType'
        - name: userPhone
          in: query
          schema:
            type: string
        - name: userName
          in: query
          schema:
            type: string
        - name: userEmail
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a395af9-5fe7-4c95-befb-8f4d9a47bfc3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    post:
      tags:
        - Notification
      summary: Create Notification
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1f47a60b-9efd-4765-adc8-dc6931e2dc35
      requestBody:
        description: Notification to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotificationRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/{id}:
    delete:
      tags:
        - PaymentCondition
      summary: Delete PaymentCondition by Id
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 998177ac-76ac-44e2-8d78-d08455fe3f2b
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentCondition
      summary: Get PaymentCondition by id
      operationId: GetByIdPaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 69957136-3096-4d1e-9dd8-e73dc93159fd
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentCondition
      summary: Update part of PaymentCondition
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentCondition/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4d897f95-77cf-4c46-8c89-a3bfa4836fb7
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentCondition
      summary: Update PaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a6312cea-cb77-45a6-840f-bfccb09e5807
      requestBody:
        description: PaymentCondition to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentConditionRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/paged:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 717992fc-0732-49f5-8d5b-558f8f8388bb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/all:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4ba31add-c9a0-4b07-a59c-361773532b6e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions:
    post:
      tags:
        - PaymentCondition
      summary: Create PaymentCondition
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4f5a2a57-6015-4778-8e6e-80d0d009602b
      requestBody:
        description: PaymentCondition to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentConditionRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/{id}:
    delete:
      tags:
        - PaymentPriceTable
      summary: Delete PaymentPriceTable by Id
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dfb0d71a-d9d7-4203-a5cc-fa3298604fa2
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentPriceTable
      summary: Get PaymentPriceTable by id
      operationId: GetByIdPaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1390e2b7-88da-4ca2-aab5-76c84f010636
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentPriceTable
      summary: Update part of PaymentPriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentPriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 29c0b056-344b-40a0-9c18-d90d80cd826a
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentPriceTable
      summary: Update PaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 02037b8c-a338-4808-979f-0b2d46ef3243
      requestBody:
        description: PaymentPriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentPriceTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/paged:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter with pagination
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 86e90006-8968-4ead-b9c1-b504779854a2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/all:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a72335bb-941a-40b3-875a-6a0b7d8d1f62
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables:
    post:
      tags:
        - PaymentPriceTable
      summary: Create PaymentPriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a09647c1-2635-4993-949f-f46ebe760649
      requestBody:
        description: PaymentPriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentPriceTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/{id}:
    delete:
      tags:
        - PriceTable
      summary: Delete PriceTable by Id
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3436c490-87ec-4ef2-a76c-935092f84946
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTable
      summary: Get PriceTable by id
      operationId: GetByIdPriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8e6b4ced-2122-443b-9639-a6e6f36ea3e0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTable
      summary: Update part of PriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 835549a2-3511-45d2-9f40-e46213084629
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTable
      summary: Update PriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 95ae99f1-4179-45e0-9309-2538c428c4f0
      requestBody:
        description: PriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/paged:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8ca4b21c-b5b0-4756-9390-30a2668d0daf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/all:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b021df1c-952f-4d6b-823a-c207f77c079b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables:
    post:
      tags:
        - PriceTable
      summary: Create PriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 18572daa-b09b-40f0-aa36-06e1e7eb3fc3
      requestBody:
        description: PriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/{id}:
    delete:
      tags:
        - PriceTableItem
      summary: Delete PriceTableItem by Id
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 277276d1-a258-4f13-9b09-4a330233efee
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableItem
      summary: Get PriceTableItem by id
      operationId: GetByIdPriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2f113c4e-5441-4941-be80-85c8f7642d4b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableItem
      summary: Update part of PriceTableItem
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableItem/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7837d3e7-24a3-40bf-9611-32e9cfbe689a
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableItem
      summary: Update PriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: be72b323-c425-42d4-96c3-5cb2f86a12e4
      requestBody:
        description: PriceTableItem to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableItemRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/paged:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter with pagination
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 28790f6e-d10a-4916-9d79-de4c7f8b48ee
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/all:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b444384b-79b8-4901-88c4-41c14fd0b370
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems:
    post:
      tags:
        - PriceTableItem
      summary: Create PriceTableItem
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 82e2fe3c-b702-4d81-a9dc-953cf559afc4
      requestBody:
        description: PriceTableItem to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableItemRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/{id}:
    delete:
      tags:
        - PriceTableUnloading
      summary: Delete PriceTableUnloading by Id
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cbe9c300-faa2-4923-8d79-94f602803a48
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableUnloading
      summary: Get PriceTableUnloading by id
      operationId: GetByIdPriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4fc71a89-8e26-4909-b077-48ce71bece3c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableUnloading
      summary: Update part of PriceTableUnloading
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableUnloading/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 348d8804-91e6-475f-bec9-6cd4064138f5
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableUnloading
      summary: Update PriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4608b724-ea13-48f5-a77c-5e14ad935f97
      requestBody:
        description: PriceTableUnloading to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableUnloadingRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/paged:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter with pagination
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6ad1b7d4-297c-41b0-8bc9-df09863ff7a4
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/all:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1b62f962-8b2f-4efb-b55d-de8492d23774
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading:
    post:
      tags:
        - PriceTableUnloading
      summary: Create PriceTableUnloading
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b6d1527b-8975-448e-866d-9fa1bf53ee93
      requestBody:
        description: PriceTableUnloading to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableUnloadingRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/{id}:
    delete:
      tags:
        - Product
      summary: Delete Product by Id
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d12c3cc8-dc9c-4e69-94e7-41edbf78b832
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Product
      summary: Get Product by id
      operationId: GetByIdProduct
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 10510c32-fa25-4929-bd57-9397d85e5199
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Product
      summary: Update part of Product
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Product/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 399129aa-952d-4872-bda6-dc522f0d7800
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Product
      summary: Update Product
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 39ecc834-11f9-454c-8331-e68a801e0bb1
      requestBody:
        description: Product to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/paged:
    get:
      tags:
        - Product
      summary: Get All Product by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c639a1c0-f812-4bdc-bac5-37f5523eb799
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/all:
    get:
      tags:
        - Product
      summary: Get All Product by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 25bdc4a2-36e8-44bb-8f10-530e4606cc25
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products:
    post:
      tags:
        - Product
      summary: Create Product
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6e4a5e6a-dddf-4bc8-b916-edbec06fe646
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/{id}:
    delete:
      tags:
        - ProductGroup
      summary: Delete ProductGroup by Id
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f5e7f6d7-e4d3-4091-b026-7bebb2afb135
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by id
      operationId: GetByIdProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d32e9491-921a-4f67-911e-3d44eebe1a8e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductGroup
      summary: Update part of ProductGroup
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductGroup/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6988a151-5316-4c80-b4c6-b9363ed38e44
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductGroup
      summary: Update ProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 671ec9b6-e14e-4c1e-8c92-be2de530f518
      requestBody:
        description: ProductGroup to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductGroupRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/paged:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5eb77905-7ff0-4dbe-8765-589f13d10b3e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/all:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3de88299-d83c-4d3f-97c8-2f3cf7a5468d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/integration/{externalCode}:
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by external Code
      operationId: GetByExternalCodeProductGroupController
      parameters:
        - name: externalCode
          in: path
          description: ProductGroup external code
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6521208a-4596-4180-8c8b-fefe1af9d41f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups:
    post:
      tags:
        - ProductGroup
      summary: Create ProductGroup
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8a53de3b-6614-4e77-9409-8438ed70d83a
      requestBody:
        description: ProductGroup to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductGroupRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/{id}:
    delete:
      tags:
        - ProductLine
      summary: Delete ProductLine by Id
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d7f98be4-7314-424d-9b2e-bdb5148206fd
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductLine
      summary: Get ProductLine by id
      operationId: GetByIdProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 98c6d3bc-6f74-4c47-b295-69845d032afc
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductLine
      summary: Update part of ProductLine
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductLine/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f210b7aa-5ef2-4415-9151-62a3ce50d0eb
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductLine
      summary: Update ProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ea84ac9b-8025-4d08-96b1-2030c7f3093c
      requestBody:
        description: ProductLine to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductLineRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/paged:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9019b287-5e73-4667-95ae-80f2a43f77e0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/all:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e8fd1023-40aa-4140-9c46-be8650a25c21
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines:
    post:
      tags:
        - ProductLine
      summary: Create ProductLine
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a8cff610-a90a-42cc-8b91-1b60e3cdf574
      requestBody:
        description: ProductLine to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductLineRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}:
    delete:
      tags:
        - PurchaseOrder
      summary: Delete PurchaseOrder by Id
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c40c240c-b5da-4908-ad64-a72b7a747540
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PurchaseOrder
      summary: Get PurchaseOrder by id
      operationId: GetByIdPurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 82a4e381-46a2-479d-89b7-81d6613a5a63
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PurchaseOrder
      summary: Update part of PurchaseOrder
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PurchaseOrder/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6500d44d-ace7-45c1-a0a9-49ba44ebf897
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PurchaseOrder
      summary: Update PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 36d7ce5a-8e7e-4f28-bfde-f33bba4151d5
      requestBody:
        description: PurchaseOrder to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPurchaseOrderRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/paged:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter with pagination
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e76a9f40-bfe5-4447-8190-0978630c4371
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/all:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3cf2e97f-f2ba-4bd2-aea2-f81292ababed
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/approve:
    post:
      tags:
        - PurchaseOrder
      summary: Approve PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: aae4d2cf-35d5-4012-b1d3-e16b36e5fedb
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/cancel:
    post:
      tags:
        - PurchaseOrder
      summary: Cancel PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 269487c8-ac40-4fc0-bac8-69c79ad66e50
      requestBody:
        description: PostCancelPurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCancelPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders:
    post:
      tags:
        - PurchaseOrder
      summary: Create PurchaseOrder
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: af0a582a-80ec-4788-aa7d-2426b1904aed
      requestBody:
        description: PurchaseOrder to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPurchaseOrderRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/refused:
    post:
      tags:
        - PurchaseOrder
      summary: Refused PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 81f5149a-47cb-4665-9fb1-9a5edec1075f
      requestBody:
        description: Post Refused PurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRefusedPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/sendtoapprove:
    post:
      tags:
        - PurchaseOrder
      summary: SendToApprove PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: areaManagerCode
          in: query
          description: Area Manager Code
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f7321e43-018a-4d0d-acea-96cadee6d440
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/{id}:
    delete:
      tags:
        - ReasonCancel
      summary: Delete ReasonCancel by Id
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5a43fdeb-a01d-4e2f-ab9d-ec98d741f888
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonCancel
      summary: Get ReasonCancel by id
      operationId: GetByIdReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c829e446-5bdd-4371-9f87-066292b4094f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonCancel
      summary: Update part of ReasonCancel
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonCancel/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0813c254-3510-4aab-91a9-4d05a504ca3f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonCancel
      summary: Update ReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 31f271ea-04b0-45d4-9ba7-eb03dbdf66ec
      requestBody:
        description: ReasonCancel to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonCancelRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/paged:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 38471382-3fbe-484a-a2a5-670e16459a28
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/all:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 617718b5-d8c3-4058-baa1-c450c1cf0c31
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels:
    post:
      tags:
        - ReasonCancel
      summary: Create ReasonCancel
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d8845b5c-cd10-4867-894a-6ffa59c62b16
      requestBody:
        description: ReasonCancel to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonCancelRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/{id}:
    delete:
      tags:
        - ReasonVisit
      summary: Delete ReasonVisit by Id
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4a2bbb35-a69a-4d8f-887f-4b785eb02f95
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonVisit
      summary: Get ReasonVisit by id
      operationId: GetByIdReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c40430c9-86f9-453c-b1f9-08866ab3c4a5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonVisit
      summary: Update part of ReasonVisit
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonVisit/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 202edfe4-b1fb-42f3-a168-75c9743d4b72
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonVisit
      summary: Update ReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d3eafb0a-30a6-4082-ac09-f87a817a326c
      requestBody:
        description: ReasonVisit to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonVisitRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/paged:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter with pagination
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 59a6b747-acd9-4022-acb0-8f0f32431e64
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/all:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 917900be-98e5-4487-9a29-acfced13ef33
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits:
    post:
      tags:
        - ReasonVisit
      summary: Create ReasonVisit
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f47afcd6-d383-48df-9086-8d33cf7712b9
      requestBody:
        description: ReasonVisit to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonVisitRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/{id}:
    delete:
      tags:
        - Template
      summary: Delete Template by Id
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d2fdb5a3-bd25-4dc4-aa4c-020ca209bc67
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Template
      summary: Get Template by id
      operationId: GetByIdTemplate
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 823c99c7-d312-4685-ae47-a2cfd5340f1c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Template
      summary: Update part of Template
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Template/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: db59b67d-a50a-4cda-92c8-e1b478e1caf4
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Template
      summary: Update Template
      parameters:
        - name: id
          in: path
          description: Template Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5d749379-b284-426a-9653-dbb91dc1d2ac
      requestBody:
        description: Template to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTemplateRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/paged:
    get:
      tags:
        - Template
      summary: Get All Template by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6b2da7a5-976f-4b2c-8efe-b379057e85ee
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/all:
    get:
      tags:
        - Template
      summary: Get All Template by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 39528b30-308d-49fe-8fdb-5b0bae139c39
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates:
    post:
      tags:
        - Template
      summary: Create Template
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 381ef5f4-d461-45e0-97c7-9005000c1528
      requestBody:
        description: Template to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTemplateRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/{id}:
    delete:
      tags:
        - User
      summary: Delete User by Id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 633ccb77-c56f-4f41-9fe8-d06d17dc958d
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - User
      summary: Get User by id
      operationId: GetByIdUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 25aa9bfe-8bc6-4d91-b3b5-5b8e1fbd2e08
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - User
      summary: Update part of User
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/User/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c6830b89-d79c-41e8-a568-cc482243d3d1
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - User
      summary: Update User
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 08882333-e8d1-45f7-b860-b9cdb938e91d
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/paged:
    get:
      tags:
        - User
      summary: Get All User by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dc388da9-ca2c-4fd4-89d0-26d5f0ab6bdf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/all:
    get:
      tags:
        - User
      summary: Get All User by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: aa77e268-c692-4b5b-b772-7d032c1ab6a5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/userinfo:
    get:
      tags:
        - User
      summary: Get User Info
      operationId: GetUserInfo
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6b19377d-7d23-4e13-b606-c6c1d749ec90
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 97858910-2420-4144-ba42-d8d010fa19d1
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/forcerchangepassword:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0cbcef50-0c3b-40a8-814b-6a4371eb5b9e
      requestBody:
        description: Force Change Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserForceChangePasswordRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/pushtoken:
    post:
      tags:
        - User
      summary: Add User Push Token
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 890a4bef-1c62-48f1-99fe-10ffd50fcc6c
      requestBody:
        description: FCM Token
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/reset_password:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 45f1a632-f248-4930-b9f5-3882e46249f5
      requestBody:
        description: Reset Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserResetPassword'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signin:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2c65c71e-e6a0-4d4d-9a86-c9bf4da494cf
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserSignInRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserSignInResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signup:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 73bf33b8-2e5f-49ec-bc0d-28d8fc06dfbb
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/{id}:
    delete:
      tags:
        - VehicleType
      summary: Delete VehicleType by Id
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4151a6b9-a704-4765-899a-6c87a7de9ef0
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - VehicleType
      summary: Get VehicleType by id
      operationId: GetByIdVehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4d7d0870-8e09-4725-8843-fde6d3f944ec
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - VehicleType
      summary: Update part of VehicleType
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/VehicleType/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 51a5d041-2272-479c-9ccd-77e3421f7aaa
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - VehicleType
      summary: Update VehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0e140a98-00ac-449c-836f-22d980dd41e4
      requestBody:
        description: VehicleType to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutVehicleTypeRequest'
      responses:
        '204':
          description: No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/paged:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a2d84687-7524-4eff-b8a7-ef6a9be7a7f6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/all:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9882e38b-330f-496d-bf89-aa9d3f6f9887
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes:
    post:
      tags:
        - VehicleType
      summary: Create VehicleType
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b8b5aff0-36d0-482d-a34c-c5bdc40d0fec
      requestBody:
        description: VehicleType to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVehicleTypeRequest'
      responses:
        '201':
          description: Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '412':
          description: Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/version:
    get:
      tags:
        - Version
      summary: Get Version
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 642e0f96-e732-4c81-b510-d6b0a6d1e2a2
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
        '403':
          description: Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
        '404':
          description: Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
        '500':
          description: Intertal Server Error - The server has encountered a situation it doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
components:
  schemas:
    ActionType:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
          nullable: true
        longitude:
          type: number
          format: double
          nullable: true
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    AddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    AddressTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    ClientStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    CommissionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DatabaseCollector:
      type: object
      properties:
        outPutFolder:
          type: string
          nullable: true
        connection:
          $ref: '#/components/schemas/DatabaseConnection'
        queries:
          $ref: '#/components/schemas/DatabaseQueries'
      additionalProperties: false
    DatabaseConnection:
      type: object
      properties:
        name:
          type: string
          nullable: true
        server:
          type: string
          nullable: true
        port:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        commandTimeout:
          type: integer
          format: int32
        minPoolSize:
          type: integer
          format: int32
        maxPoolSize:
          type: integer
          format: int32
      additionalProperties: false
    DatabaseQueries:
      type: object
      properties:
        queryAddresses:
          type: string
          nullable: true
        queryAddressesIsEnable:
          type: boolean
        queryClients:
          type: string
          nullable: true
        queryClientsIsEnable:
          type: boolean
        queryFreightTables:
          type: string
          nullable: true
        queryFreightTablesIsEnable:
          type: boolean
        queryPaymentConditions:
          type: string
          nullable: true
        queryPaymentConditionsIsEnable:
          type: boolean
        queryPaymentPriceTables:
          type: string
          nullable: true
        queryPaymentPriceTablesIsEnable:
          type: boolean
        queryPriceTableItems:
          type: string
          nullable: true
        queryPriceTableItemsIsEnable:
          type: boolean
        queryPriceTables:
          type: string
          nullable: true
        queryPriceTablesIsEnable:
          type: boolean
        queryProductGroups:
          type: string
          nullable: true
        queryProductGroupsIsEnable:
          type: boolean
        queryProductLines:
          type: string
          nullable: true
        queryProductLinesIsEnable:
          type: boolean
        queryProducts:
          type: string
          nullable: true
        queryProductsIsEnable:
          type: boolean
        queryUsers:
          type: string
          nullable: true
        queryUsersIsEnable:
          type: boolean
        queryVehicleTypes:
          type: string
          nullable: true
        queryVehicleTypesIsEnable:
          type: boolean
        queryDistribuitionCenterClientAddress:
          type: string
          nullable: true
        queryDistribuitionCenterClientAddressIsEnable:
          type: boolean
        queryFreightConversionFactor:
          type: string
          nullable: true
        queryFreightConversionFactorIsEnable:
          type: boolean
        queryDiscountRule:
          type: string
          nullable: true
        queryDiscountRuleIsEnable:
          type: boolean
        queryCommission:
          type: string
          nullable: true
        queryCommissionIsEnable:
          type: boolean
        queryReasonCancel:
          type: string
          nullable: true
        queryReasonCancelIsEnable:
          type: boolean
        queryPriceTableUnloading:
          type: string
          nullable: true
        queryPriceTableUnloadingIsEnable:
          type: boolean
      additionalProperties: false
    DiscountRuleStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DiscountTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DiscountWeightTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DistribuitionCenterClientAddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DocumentVersion:
      type: object
      additionalProperties: false
    ErrorDetails:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: string
          nullable: true
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FreightComposition:
      type: object
      properties:
        vehicleType:
          $ref: '#/components/schemas/VehicleType'
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightCompositionModel:
      type: object
      properties:
        vehicleTypeId:
          type: string
          format: uuid
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightConversionFactorStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightType:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    GetAllAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    GetAllAuditResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        entity:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ActionType'
        data:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    GetAllCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    GetAllCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    GetAllCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    GetAllDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    GetAllDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    GetAllDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    GetAllDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    GetAllFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    GetAllFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    GetAllIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    GetAllIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    GetAllNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllPagedAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedAuditResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAuditResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientContactCalendarResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCommissionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCommissionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyGlobalParameterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountRuleResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountRuleResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountWeightResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountWeightResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterClientAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightConversionFactorResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationConfigResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationStatusResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedNotificationResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllNotificationResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentConditionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentConditionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableItemResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableItemResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableUnloadingResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductGroupResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductGroupResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductLineResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductLineResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPurchaseOrderResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonCancelResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonCancelResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonVisitResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonVisitResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedTemplateResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllTemplateResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedUserResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllUserResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedVehicleTypeResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllVehicleTypeResponse'
          nullable: true
      additionalProperties: false
    GetAllPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    GetAllPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    GetAllPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    GetAllPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    GetAllPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    GetAllProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    GetAllProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    GetAllProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    GetAllPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightComposition'
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        reasonCancel:
          $ref: '#/components/schemas/ReasonCancel'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    GetAllReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    GetAllReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    GetAllTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    GetAllUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    GetAllVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    GetWidgetsDto:
      type: object
      properties:
        totalOrders:
          type: integer
          format: int64
        totalUsers:
          type: integer
          format: int64
        totalProducts:
          type: integer
          format: int64
        totalClients:
          type: integer
          format: int64
      additionalProperties: false
    GroupPurchaseOrderDto:
      type: object
      properties:
        totalInProgress:
          type: integer
          format: int64
        totalWaitingForApproved:
          type: integer
          format: int64
        totalApproved:
          type: integer
          format: int64
        totalRefused:
          type: integer
          format: int64
        totalCanceled:
          type: integer
          format: int64
        totalExpired:
          type: integer
          format: int64
      additionalProperties: false
    IntegrationStatusActions:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
    NotificationChannel:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    NotificationType:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    Operation:
      type: object
      properties:
        operationType:
          $ref: '#/components/schemas/OperationType'
        path:
          type: string
          nullable: true
        op:
          type: string
          nullable: true
        from:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    OperationType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PaymentCondition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PaymentConditionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PaymentPriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PostAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostCancelPurchaseOrderRequest:
      type: object
      properties:
        reasonCancelId:
          type: string
          format: uuid
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PostClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PostClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    PostNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PostPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PostPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    PostReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostRefusedPurchaseOrderRequest:
      type: object
      properties:
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostUserForceChangePasswordRequest:
      required:
        - defaultPassword
        - email
      type: object
      properties:
        email:
          minLength: 1
          type: string
        defaultPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserPushTokenRequest:
      required:
        - deviceId
        - token
      type: object
      properties:
        token:
          minLength: 1
          type: string
        deviceId:
          minLength: 1
          type: string
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
      additionalProperties: false
    PostUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        password:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResetPassword:
      required:
        - email
        - newPassword
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        newPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserResetPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PostUserSignInRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserSignInResponse:
      type: object
      properties:
        token:
          type: string
          nullable: true
        expiresIn:
          type: number
          format: double
      additionalProperties: false
    PostVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PostVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PriceTableItemStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableUnloadingStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
      additionalProperties: false
    ProductEspecification:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    ProductGroupStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductLineStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PurchaseOrderHistory:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
        date:
          type: string
          format: date-time
        summary:
          type: string
          nullable: true
        userId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    PurchaseOrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderItemModelBase:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderStatus:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PushToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        deviceId:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PushTokenStatus'
      additionalProperties: false
    PushTokenStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PutAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PutClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
      additionalProperties: false
    PutClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PutCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PutCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PutCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PutDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PutDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PutDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PutDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PutFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PutFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PutIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PutIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PutNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PutPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PutPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PutPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PutPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PutPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PutProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PutProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PutProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PutPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PutReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PutReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PutTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PutUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PutVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    ReasonCancel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    ReasonCancelStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ReferenceTypeEnum:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    TablePriceOperationTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    UnitMeasurementTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isSuperAdmin:
          type: boolean
        isAdmin:
          type: boolean
        isRegionManager:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        forceChangePassword:
          type: boolean
        pushTokens:
          type: array
          items:
            $ref: '#/components/schemas/PushToken'
          nullable: true
      additionalProperties: false
    UserStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    VehicleType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    VehicleTypeStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\""
      name: Authorization
      in: header
security:
  - Bearer: []
