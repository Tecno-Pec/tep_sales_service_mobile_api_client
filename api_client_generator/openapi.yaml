openapi: 3.0.1
info:
  title: Tep.Sales.Service API
  description: Tep.Sales.Service API
  termsOfService: https://github.com/
  contact:
    name: Administrator
    url: https://github.com/jefersonmlopes
    email: admin@tecnoepec.com.br
  license:
    name: Use under MIT License
    url: https://github.com/
  version: v1
paths:
  /tepsales/v1/addresses/{id}:
    delete:
      tags:
        - Address
      summary: Delete Address by Id
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d73d2230-f3e1-4521-b627-f72d8662dfd3
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Address
      summary: Get Address by id
      operationId: GetByIdAddress
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3e8d0ae3-d6d9-4f91-ab26-9f056f1ca4bf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Address
      summary: Update part of Address
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Address/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Address id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d0b39983-5db0-4597-a969-a61ef130be60
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Address
      summary: Update Address
      parameters:
        - name: id
          in: path
          description: Address Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 22d24e7f-36fe-451f-9fee-0235893b7e5e
      requestBody:
        description: Address to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAddressRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/all:
    get:
      tags:
        - Address
      summary: Get All Address by filter
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.asc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 741e542f-65d9-4c73-9723-4198914965ed
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses/paged:
    get:
      tags:
        - Address
      summary: Get All Address by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AddressTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/AddressStatus'
        - name: parentIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d67deac1-ae89-46e8-a162-8c516d993857
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/addresses:
    post:
      tags:
        - Address
      summary: Create Address
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2c2e76ca-6f7e-4fd0-ae5e-21f76d417b26
      requestBody:
        description: Address to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAddressRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAddressResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: ownerId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: CreatedAt.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9e4939b4-177e-4296-9efa-44c1b2540f0f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/audits/latest:
    get:
      tags:
        - Audit
      summary: Get All Audit by filter with pagination
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: entity
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/ActionType'
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: userCreated
          in: query
          schema:
            type: string
            format: uuid
        - name: userUpdated
          in: query
          schema:
            type: string
            format: uuid
        - name: ownerId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: CreatedAt.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d3d921df-5644-40ab-93e2-03bd0789de06
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedAuditResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/{id}:
    delete:
      tags:
        - Client
      summary: Delete Client by Id
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d7394757-3206-4b57-820e-cd257c617608
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Client
      summary: Get Client by id
      operationId: GetByIdClient
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fa7b9214-bfe8-4deb-8266-a3394fc16777
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Client
      summary: Update part of Client
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Client/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f7ddbf86-aa3c-4626-a9a3-329815c2ed63
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Client
      summary: Update Client
      parameters:
        - name: id
          in: path
          description: Client Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3a7bb4d6-faff-4663-9ace-af3b09750492
      requestBody:
        description: Client to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/all:
    get:
      tags:
        - Client
      summary: Get All Client by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2a36c7db-c0f4-498c-adc2-891892178382
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients/paged:
    get:
      tags:
        - Client
      summary: Get All Client by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: ie
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: userSellerId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e5663b2d-5a63-417c-b6f0-7cbd9661d07f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clients:
    post:
      tags:
        - Client
      summary: Create Client
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e9efb61f-34d5-4647-a12d-b6fc473c8a3b
      requestBody:
        description: Client to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/{id}:
    delete:
      tags:
        - ClientContactCalendar
      summary: Delete ClientContactCalendar by Id
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7fac9b29-1d53-45d4-8f23-62d77caebe9c
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ClientContactCalendar
      summary: Get ClientContactCalendar by id
      operationId: GetByIdClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 80a08227-5adf-4ad8-9242-25c0ab43ed90
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ClientContactCalendar
      summary: Update part of ClientContactCalendar
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ClientContactCalendar/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1e1fead1-17ee-499f-9afa-4153c4ffd6bd
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ClientContactCalendar
      summary: Update ClientContactCalendar
      parameters:
        - name: id
          in: path
          description: ClientContactCalendar Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fd3f9472-203c-4a50-af84-6dd8f08bc92f
      requestBody:
        description: ClientContactCalendar to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutClientContactCalendarRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/all:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientContactCalendarStatus'
        - name: allDay
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c2393c51-1a2b-4fa2-9ab8-71aaa8f94f2c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar/paged:
    get:
      tags:
        - ClientContactCalendar
      summary: Get All ClientContactCalendar by filter with pagination
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: clientName
          in: query
          schema:
            type: string
        - name: salesmanId
          in: query
          schema:
            type: string
            format: uuid
        - name: salesmanName
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClientContactCalendarStatus'
        - name: allDay
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 86f9cc24-0577-4c4f-994b-8bfd4319e670
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/clientcontactcalendar:
    post:
      tags:
        - ClientContactCalendar
      summary: Create ClientContactCalendar
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 36970d54-3b95-490d-9a15-416e743ae7f1
      requestBody:
        description: ClientContactCalendar to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientContactCalendarRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientContactCalendarResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/{id}:
    delete:
      tags:
        - Commission
      summary: Delete Commission by Id
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9f3470ed-adfb-489e-b7c6-34aba36f61dc
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Commission
      summary: Get Commission by id
      operationId: GetByIdCommission
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6439db0d-51e4-4682-9abd-e763b5ee56f0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Commission
      summary: Update part of Commission
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Commission/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Commission id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 83f8a3c5-7350-42bf-9760-642f663853b6
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Commission
      summary: Update Commission
      parameters:
        - name: id
          in: path
          description: Commission Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ab185ab2-768c-40df-b4b3-47cb713003cb
      requestBody:
        description: Commission to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommissionRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/all:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d75eafc2-1848-4500-9e96-c70d91574297
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions/paged:
    get:
      tags:
        - Commission
      summary: Get All Commission by filter with pagination
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CommissionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fd1548c5-2047-4bc7-a543-fee02fea0052
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/commissions:
    post:
      tags:
        - Commission
      summary: Create Commission
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d95b4a0e-594d-4b4d-9fe3-8ab93e7d827e
      requestBody:
        description: Commission to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommissionRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommissionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/{id}:
    delete:
      tags:
        - Company
      summary: Delete Company by Id
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e6785be8-2122-47ed-bb38-03f84c4eddda
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Company
      summary: Get Company by id
      operationId: GetByIdCompany
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 24223fc5-008f-4f78-85d5-5aee93af3f6b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Company
      summary: Update part of Company
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Company/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Company id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 429dee03-daea-41f4-846f-fa02c7bf5305
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Company
      summary: Update Company
      parameters:
        - name: id
          in: path
          description: Company Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9895358e-6a9d-42df-95ab-951495e9af6f
      requestBody:
        description: Company to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/all:
    get:
      tags:
        - Company
      summary: Get All Company by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: edd04b8e-ab5f-4d3e-afd4-9822b60a9590
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies/paged:
    get:
      tags:
        - Company
      summary: Get All Company by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0968fe2e-249b-47db-b1bb-268a64e503f5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companies:
    post:
      tags:
        - Company
      summary: Create Company
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f854dd3e-58c4-4162-8b68-8259e133d292
      requestBody:
        description: Company to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/{id}:
    delete:
      tags:
        - CompanyGlobalParameter
      summary: Delete CompanyGlobalParameter by Id
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 46e13ca9-d7ac-42d4-bb43-c4ebde03f75f
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get CompanyGlobalParameter by id
      operationId: GetByIdCompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 62f5d32b-94a1-47b9-ad67-21c6949d7e59
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - CompanyGlobalParameter
      summary: Update part of CompanyGlobalParameter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/CompanyGlobalParameter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2e0bd190-2323-43a2-802b-a184f4ecfeeb
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - CompanyGlobalParameter
      summary: Update CompanyGlobalParameter
      parameters:
        - name: id
          in: path
          description: CompanyGlobalParameter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 93981003-e819-4377-bbfe-015c061e2939
      requestBody:
        description: CompanyGlobalParameter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCompanyGlobalParameterRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/all:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 690a0b68-9d3b-4d67-94f5-85f5b5175770
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters/paged:
    get:
      tags:
        - CompanyGlobalParameter
      summary: Get All CompanyGlobalParameter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 813a3317-15a5-48f5-ad63-04650ee2d3cc
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/companyglobalparameters:
    post:
      tags:
        - CompanyGlobalParameter
      summary: Create CompanyGlobalParameter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 7be3278e-7149-428b-b076-a90d42a4d929
      requestBody:
        description: CompanyGlobalParameter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyGlobalParameterRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCompanyGlobalParameterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderstatus:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bda8d6d1-4d83-4c58-b73e-de412b829fe2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderbysalesman:
    get:
      tags:
        - Dashboard
      summary: Get GetPurchaseOrderBySalesman
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8835315d-513d-4da7-b6b6-a8af22f7acb9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderfavoriteproducts:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 337df472-abef-42f7-9f7c-783db0434d9b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/purchaseorderlastsixmonths:
    get:
      tags:
        - Dashboard
      summary: Get GroupPurchaseOrderByStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b894a2f7-acf4-47fa-9c9d-d04e9732b41f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPurchaseOrderDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/dashboard/widgets:
    get:
      tags:
        - Dashboard
      summary: Get Widgets
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fd93fe41-de90-472f-a177-023831ef6a30
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWidgetsDto'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/{id}:
    delete:
      tags:
        - DiscountRule
      summary: Delete DiscountRule by Id
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 53f338e5-cb71-4a8a-9ca2-1bab34669192
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountRule
      summary: Get DiscountRule by id
      operationId: GetByIdDiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 98bfc6da-d3c1-4d7a-9e56-86caf5f6fc76
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountRule
      summary: Update part of DiscountRule
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountRule/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountRule id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c4ca1751-3b88-4d47-b5c0-89a85010a326
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountRule
      summary: Update DiscountRule
      parameters:
        - name: id
          in: path
          description: DiscountRule Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 65f18153-568d-4d14-8917-dbdfcdb4529d
      requestBody:
        description: DiscountRule to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountRuleRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/all:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: aa891cf6-a8fa-4df5-8e58-d943e3e1e8fe
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules/paged:
    get:
      tags:
        - DiscountRule
      summary: Get All DiscountRule by filter with pagination
      parameters:
        - name: discountWeightType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountWeightTypeEnum'
        - name: discountType
          in: query
          schema:
            $ref: '#/components/schemas/DiscountTypeEnum'
        - name: referenceType
          in: query
          schema:
            $ref: '#/components/schemas/ReferenceTypeEnum'
        - name: referenceId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DiscountRuleStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ece6c473-083f-4214-8e9e-92b1e7353aa8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountRules:
    post:
      tags:
        - DiscountRule
      summary: Create DiscountRule
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0e43182e-f7e6-4d1f-b30d-abaaaef7fc9b
      requestBody:
        description: DiscountRule to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountRuleRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountRuleResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/{id}:
    delete:
      tags:
        - DiscountWeight
      summary: Delete DiscountWeight by Id
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: de2d6093-1112-4499-bba1-aa1d318bd46e
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DiscountWeight
      summary: Get DiscountWeight by id
      operationId: GetByIdDiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6b71b8cf-823e-4add-9e99-6d268b254d1d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DiscountWeight
      summary: Update part of DiscountWeight
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DiscountWeight/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DiscountWeight id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fb14f28a-6a2d-402c-8f51-764f18b5a721
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DiscountWeight
      summary: Update DiscountWeight
      parameters:
        - name: id
          in: path
          description: DiscountWeight Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2575c2b7-b619-438c-beb3-44fb17e236eb
      requestBody:
        description: DiscountWeight to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiscountWeightRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/all:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fc66d4b6-d558-4a89-b258-a27908274507
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights/paged:
    get:
      tags:
        - DiscountWeight
      summary: Get All DiscountWeight by filter with pagination
      parameters:
        - name: quantity
          in: query
          schema:
            type: number
            format: double
        - name: percent
          in: query
          schema:
            type: number
            format: double
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 20585c8a-8bcb-4a36-ad21-9cc9120c8570
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/discountWeights:
    post:
      tags:
        - DiscountWeight
      summary: Create DiscountWeight
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4c6f68e7-babb-40ab-ac0e-a8d9a660cb4e
      requestBody:
        description: DiscountWeight to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDiscountWeightRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDiscountWeightResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/{id}:
    delete:
      tags:
        - DistribuitionCenter
      summary: Delete DistribuitionCenter by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2f316237-c75a-44d1-9b51-9195f6c03e5b
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenter
      summary: Get DistribuitionCenter by id
      operationId: GetByIdDistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d5944075-7a38-459e-b558-86f1751de2bb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenter
      summary: Update part of DistribuitionCenter
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenter/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 38adf1f8-7d63-4998-ab1d-207ccf2a3e4f
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenter
      summary: Update DistribuitionCenter
      parameters:
        - name: id
          in: path
          description: DistribuitionCenter Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 37bbc07e-f54d-4eca-855a-7455a9ca36d1
      requestBody:
        description: DistribuitionCenter to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/all:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9d4911b2-c2d1-4d50-b054-3bc097c9c64e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters/paged:
    get:
      tags:
        - DistribuitionCenter
      summary: Get All DistribuitionCenter by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: document
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3fb8db4d-878f-4b9f-a88e-b48965952bc9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionsCenters:
    post:
      tags:
        - DistribuitionCenter
      summary: Create DistribuitionCenter
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fed6326c-6583-48c8-b401-d1bcfab3b374
      requestBody:
        description: DistribuitionCenter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDistribuitionCenterResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/{id}:
    delete:
      tags:
        - DistribuitionCenterClientAddress
      summary: Delete DistribuitionCenterClientAddress by Id
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e3177997-7fb9-46fd-ab6f-506035dfa809
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get DistribuitionCenterClientAddress by id
      operationId: GetByIdDistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 22fb0cc5-13d9-4e17-9b12-5213c27351f7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GetAllDistribuitionCenterClientAddressResponse
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update part of DistribuitionCenterClientAddress
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/DistribuitionCenterClientAddress/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b9c1b699-1948-4c06-bf92-221bdce55cd4
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - DistribuitionCenterClientAddress
      summary: Update DistribuitionCenterClientAddress
      parameters:
        - name: id
          in: path
          description: DistribuitionCenterClientAddress Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6adb0afa-281d-4f2c-81e1-68e71ad47f41
      requestBody:
        description: DistribuitionCenterClientAddress to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDistribuitionCenterClientAddressRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/all:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 53721d37-3c0e-4cd5-b3f6-9d54037d5b59
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/GetAllDistribuitionCenterClientAddressResponse
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress/paged:
    get:
      tags:
        - DistribuitionCenterClientAddress
      summary: Get All DistribuitionCenterClientAddress by filter with pagination
      parameters:
        - name: distribuitionCenterId
          in: query
          schema:
            type: string
            format: uuid
        - name: addressId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9c4260e1-e9b1-4bef-93f6-7ccf05a66714
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GetAllPagedDistribuitionCenterClientAddressResponse
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/distribuitionCenterClientAddress:
    post:
      tags:
        - DistribuitionCenterClientAddress
      summary: Create DistribuitionCenterClientAddress
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 80fa9ca1-ceb8-4ca8-906a-85c47f7ab72e
      requestBody:
        description: DistribuitionCenterClientAddress to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDistribuitionCenterClientAddressRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PostDistribuitionCenterClientAddressResponse
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/{id}:
    delete:
      tags:
        - FreightConversionFactor
      summary: Delete FreightConversionFactor by Id
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 161854ad-e755-4af7-be0c-f9d4b9c90949
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightConversionFactor
      summary: Get FreightConversionFactor by id
      operationId: GetByIdFreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 29860c28-781f-4c41-bfb6-aa03a9f8d0be
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightConversionFactor
      summary: Update part of FreightConversionFactor
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightConversionFactor/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 566bd413-101a-4e57-ba2d-d8c3b517d018
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightConversionFactor
      summary: Update FreightConversionFactor
      parameters:
        - name: id
          in: path
          description: FreightConversionFactor Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: be4b6746-6f31-447b-9b24-6ece00b8f082
      requestBody:
        description: FreightConversionFactor to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightConversionFactorRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/all:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cff4aef9-3101-4acb-aea4-ed04bd4025a6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors/paged:
    get:
      tags:
        - FreightConversionFactor
      summary: Get All FreightConversionFactor by filter with pagination
      parameters:
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightConversionFactorStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b6fa7b55-fed6-43fb-9a46-5c221eaa9d2d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GetAllPagedFreightConversionFactorResponse
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightConversionFactors:
    post:
      tags:
        - FreightConversionFactor
      summary: Create FreightConversionFactor
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: dd471963-4916-413c-90e8-61555b8da81b
      requestBody:
        description: FreightConversionFactor to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightConversionFactorRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightConversionFactorResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/{id}:
    delete:
      tags:
        - FreightTable
      summary: Delete FreightTable by Id
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f4765d0a-fa88-4f23-9e94-2049ac3bb55b
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - FreightTable
      summary: Get FreightTable by id
      operationId: GetByIdFreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 811e18bb-31cb-42bb-be59-0becd88affd3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - FreightTable
      summary: Update part of FreightTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/FreightTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: FreightTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 92f53d59-62aa-4f42-8334-9a9b414410b4
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - FreightTable
      summary: Update FreightTable
      parameters:
        - name: id
          in: path
          description: FreightTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 811a1cd4-f9ac-4db7-923b-904a76bc8139
      requestBody:
        description: FreightTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFreightTableRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/all:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e5e7794b-20eb-4a63-b699-267f771d9cbe
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables/paged:
    get:
      tags:
        - FreightTable
      summary: Get All FreightTable by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicleTypeId
          in: query
          schema:
            type: string
            format: uuid
        - name: kilometers
          in: query
          schema:
            type: number
            format: double
        - name: isFractional
          in: query
          schema:
            type: boolean
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FreightTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bbc68018-8863-4499-8235-fb3d18bc8524
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/freightTables:
    post:
      tags:
        - FreightTable
      summary: Create FreightTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f7881a79-90a7-475e-bfeb-44c47ccdc3f0
      requestBody:
        description: FreightTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFreightTableRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostFreightTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/{id}:
    delete:
      tags:
        - IntegrationConfig
      summary: Delete IntegrationConfig by Id
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: b1df071d-f5c2-4424-9772-b8aaee7d5d6c
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationConfig
      summary: Get IntegrationConfig by id
      operationId: GetByIdIntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ff58637d-92e4-46f9-a291-b4563264e2e8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationConfig
      summary: Update part of IntegrationConfig
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationConfig/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationConfig id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ca182a52-e0cb-4ccf-af56-511b4b49dd02
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationConfig
      summary: Update IntegrationConfig
      parameters:
        - name: id
          in: path
          description: IntegrationConfig Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 23327e79-8ed3-4c76-b9ed-f9c69c2d82a5
      requestBody:
        description: IntegrationConfig to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationConfigRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/all:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter
      parameters:
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 66448aba-fab6-401e-baf3-0c51bae79c61
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config/paged:
    get:
      tags:
        - IntegrationConfig
      summary: Get All IntegrationConfig by filter with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 51945902-e645-43d2-859c-7cedf36ae294
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/config:
    post:
      tags:
        - IntegrationConfig
      summary: Create IntegrationConfig
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: db74e718-b454-4014-b770-b61620528438
      requestBody:
        description: IntegrationConfig to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationConfigRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationConfigResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/{id}:
    delete:
      tags:
        - IntegrationStatus
      summary: Delete IntegrationStatus by Id
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bfccd6c2-15bf-4a01-9903-4e6ad3af7b21
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - IntegrationStatus
      summary: Get IntegrationStatus by id
      operationId: GetByIdIntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d536c25f-26b9-4745-b0ca-af7a107aadda
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - IntegrationStatus
      summary: Update part of IntegrationStatus
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/IntegrationStatus/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: IntegrationStatus id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f813315c-0f2c-48d4-b9cc-a4630cb1507b
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - IntegrationStatus
      summary: Update IntegrationStatus
      parameters:
        - name: id
          in: path
          description: IntegrationStatus Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3c456103-8676-4d0d-a50d-4cbbdb4ca2d0
      requestBody:
        description: IntegrationStatus to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationStatusRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/all:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 81aabfcd-1965-40d3-88de-f90c4352c41a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status/paged:
    get:
      tags:
        - IntegrationStatus
      summary: Get All IntegrationStatus by filter with pagination
      parameters:
        - name: context
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            $ref: '#/components/schemas/IntegrationStatusActions'
        - name: status
          in: query
          schema:
            type: string
        - name: summary
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ac763a47-8ad6-4a36-be11-fe4e575b26ad
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/integration/status:
    post:
      tags:
        - IntegrationStatus
      summary: Create IntegrationStatus
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: de29ef53-a1cd-4d1d-a058-9cc6400cf4b1
      requestBody:
        description: IntegrationStatus to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIntegrationStatusRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIntegrationStatusResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications/{id}:
    delete:
      tags:
        - Notification
      summary: Delete Notification by Id
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8b29761a-5d2f-43d2-984a-10bb114da811
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Notification
      summary: Get Notification by id
      operationId: GetByIdNotification
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2a20e9f0-3c9f-45c5-a042-fefc745acc6d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Notification
      summary: Update part of Notification
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Notification/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4ece6d45-62de-4750-9c44-b0e6dd2bb3d9
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Notification
      summary: Update Notification
      parameters:
        - name: id
          in: path
          description: Notification Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ad04c7bd-52e3-4099-bdd8-c5ae4bcdecbe
      requestBody:
        description: Notification to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNotificationRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/notifications:
    get:
      tags:
        - Notification
      summary: Get All Notification by filter with pagination
      parameters:
        - name: message
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/NotificationType'
        - name: userPhone
          in: query
          schema:
            type: string
        - name: userName
          in: query
          schema:
            type: string
        - name: userEmail
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ac9f34bb-527a-4a0b-b3a1-9a6d068805f9
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    post:
      tags:
        - Notification
      summary: Create Notification
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5b4c14e1-6253-4c70-b083-c30fc01a78c7
      requestBody:
        description: Notification to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotificationRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostNotificationResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/{id}:
    delete:
      tags:
        - PaymentCondition
      summary: Delete PaymentCondition by Id
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 420cdebd-3d50-44f7-aad4-bdfa0a8f80d0
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentCondition
      summary: Get PaymentCondition by id
      operationId: GetByIdPaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 08dfe689-5e66-427b-9715-7dc70fdad1b6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentCondition
      summary: Update part of PaymentCondition
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentCondition/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentCondition id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 073e70ef-be99-4c48-8242-11dbf43e5f03
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentCondition
      summary: Update PaymentCondition
      parameters:
        - name: id
          in: path
          description: PaymentCondition Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a9edba55-2765-41bc-a7c0-b46ca26cb417
      requestBody:
        description: PaymentCondition to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentConditionRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/paged:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 90c73311-82ee-4ead-b5a4-1ba1656da391
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions/all:
    get:
      tags:
        - PaymentCondition
      summary: Get All PaymentCondition by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: sequence
          in: query
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentConditionStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6d902a04-0096-4591-a753-4d6ee89648fb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentConditions:
    post:
      tags:
        - PaymentCondition
      summary: Create PaymentCondition
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d96c8fd3-d9fd-478e-b30e-7fd178e3c86b
      requestBody:
        description: PaymentCondition to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentConditionRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentConditionResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/{id}:
    delete:
      tags:
        - PaymentPriceTable
      summary: Delete PaymentPriceTable by Id
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fe86592d-94d8-4c45-820a-bd45f9b055f6
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PaymentPriceTable
      summary: Get PaymentPriceTable by id
      operationId: GetByIdPaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f3a4e807-0a6c-4f42-97bf-e212f107d86c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PaymentPriceTable
      summary: Update part of PaymentPriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PaymentPriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 220dd834-d009-453c-957d-6bc29a3e3f77
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PaymentPriceTable
      summary: Update PaymentPriceTable
      parameters:
        - name: id
          in: path
          description: PaymentPriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 12b7435a-993d-4b07-b431-fab3d2e74b85
      requestBody:
        description: PaymentPriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPaymentPriceTableRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/paged:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter with pagination
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8bcc0f52-4b9c-4821-9749-a7385133bb71
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables/all:
    get:
      tags:
        - PaymentPriceTable
      summary: Get All PaymentPriceTable by filter
      parameters:
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: priceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentPriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8833e48f-921b-4020-a047-c265f8607ee0
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/paymentPriceTables:
    post:
      tags:
        - PaymentPriceTable
      summary: Create PaymentPriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d0ef6f6f-1828-4db5-9beb-7856167d9f98
      requestBody:
        description: PaymentPriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaymentPriceTableRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/{id}:
    delete:
      tags:
        - PriceTable
      summary: Delete PriceTable by Id
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5d5b2b51-fe54-43e8-99b5-16a3b693b7de
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTable
      summary: Get PriceTable by id
      operationId: GetByIdPriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c734a641-7cb0-44e9-b3eb-2ab25c4609bb
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTable
      summary: Update part of PriceTable
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTable/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTable id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4c430f34-1ad9-4711-a821-f3d7264e3467
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTable
      summary: Update PriceTable
      parameters:
        - name: id
          in: path
          description: PriceTable Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2bf4183b-93fd-4711-85da-16521fd6cf7d
      requestBody:
        description: PriceTable to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/paged:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 60b376dd-2bc4-43dc-9abe-67c479e68499
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables/all:
    get:
      tags:
        - PriceTable
      summary: Get All PriceTable by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: operationType
          in: query
          schema:
            $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ee4ffbee-5d49-4fb4-9471-de00b2ec1f3c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/priceTables:
    post:
      tags:
        - PriceTable
      summary: Create PriceTable
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f99a7639-cf5b-4d5c-ba57-a21b8f30b5a3
      requestBody:
        description: PriceTable to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/{id}:
    delete:
      tags:
        - PriceTableItem
      summary: Delete PriceTableItem by Id
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 84b7a28c-3b92-4e99-8e5a-2e9c11385fa6
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableItem
      summary: Get PriceTableItem by id
      operationId: GetByIdPriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f7c8a572-526d-4406-81f7-f87904cc18ce
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableItem
      summary: Update part of PriceTableItem
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableItem/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableItem id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 00552df8-f731-4eb8-aed0-4ab4ec69dcae
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableItem
      summary: Update PriceTableItem
      parameters:
        - name: id
          in: path
          description: PriceTableItem Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c2be75b5-6307-44d8-a781-3988e651b1ad
      requestBody:
        description: PriceTableItem to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableItemRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/paged:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter with pagination
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 923a27d3-6fdb-4270-bfef-48a13d889ec8
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems/all:
    get:
      tags:
        - PriceTableItem
      summary: Get All PriceTableItem by filter
      parameters:
        - name: paymentPriceTableId
          in: query
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableItemStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4a3e72a3-fc67-4b7f-bdb9-87778059c461
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableitems:
    post:
      tags:
        - PriceTableItem
      summary: Create PriceTableItem
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4fbef963-2387-49c2-baac-27164938af3d
      requestBody:
        description: PriceTableItem to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableItemRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableItemResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/{id}:
    delete:
      tags:
        - PriceTableUnloading
      summary: Delete PriceTableUnloading by Id
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: be821256-d34b-43a9-bed0-a8f5a8c738a5
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PriceTableUnloading
      summary: Get PriceTableUnloading by id
      operationId: GetByIdPriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9a9f58c9-8742-400b-b66d-f5d153e35730
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PriceTableUnloading
      summary: Update part of PriceTableUnloading
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PriceTableUnloading/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bd3bab65-329c-4857-a289-85d7a747963c
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PriceTableUnloading
      summary: Update PriceTableUnloading
      parameters:
        - name: id
          in: path
          description: PriceTableUnloading Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cdc3a371-32d1-4503-8bb2-f11f35c0b875
      requestBody:
        description: PriceTableUnloading to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPriceTableUnloadingRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/paged:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter with pagination
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d2af5d12-d873-40d7-a5bf-e9da5d8ed1c2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading/all:
    get:
      tags:
        - PriceTableUnloading
      summary: Get All PriceTableUnloading by filter
      parameters:
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: paymentConditionId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PriceTableUnloadingStatus'
        - name: externalCode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d232c593-4de8-4229-a814-d47ee4aae21a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/pricetableunloading:
    post:
      tags:
        - PriceTableUnloading
      summary: Create PriceTableUnloading
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9e14ed5e-1f74-4c1e-befc-1e77d57e8556
      requestBody:
        description: PriceTableUnloading to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPriceTableUnloadingRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPriceTableUnloadingResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/{id}:
    delete:
      tags:
        - Product
      summary: Delete Product by Id
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 013c14d4-75b2-4ac6-aacf-743f4bd89743
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Product
      summary: Get Product by id
      operationId: GetByIdProduct
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8e7fe6bb-a7f5-48a6-94d8-390602ee06b1
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Product
      summary: Update part of Product
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Product/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9e7241d9-0653-49a8-8858-6e146bd74d76
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Product
      summary: Update Product
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9718ee79-bbc4-479e-8cbd-f2bca66ac9dd
      requestBody:
        description: Product to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/paged:
    get:
      tags:
        - Product
      summary: Get All Product by filter with pagination
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 672942d3-e0a5-4bf4-b5fb-3baeef4294c7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products/all:
    get:
      tags:
        - Product
      summary: Get All Product by filter
      parameters:
        - name: externalCode
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: productLineId
          in: query
          schema:
            type: string
            format: uuid
        - name: productGroupId
          in: query
          schema:
            type: string
            format: uuid
        - name: unitMeasurementType
          in: query
          schema:
            $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d31379da-49f2-48c3-a8c1-573396f8facf
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/products:
    post:
      tags:
        - Product
      summary: Create Product
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: d375693c-0ba7-4820-9387-6bdc093f3e2e
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/{id}:
    delete:
      tags:
        - ProductGroup
      summary: Delete ProductGroup by Id
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c890e063-bdff-4ebb-8cdc-382523fd7b6d
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by id
      operationId: GetByIdProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4a44ed4d-f37b-4c08-901e-270cc9a6aea5
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductGroup
      summary: Update part of ProductGroup
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductGroup/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductGroup id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f14947e4-b4e8-4bdd-80f8-46b1b3c7567c
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductGroup
      summary: Update ProductGroup
      parameters:
        - name: id
          in: path
          description: ProductGroup Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 79df4e69-cf1a-4134-990f-e53a3e9f62d3
      requestBody:
        description: ProductGroup to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductGroupRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/paged:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9a08945f-0038-48ca-8c61-c6b27563ccff
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/all:
    get:
      tags:
        - ProductGroup
      summary: Get All ProductGroup by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductGroupStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6cfc276a-3e70-4f73-90e8-7cfe0d93a3b7
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups/integration/{externalCode}:
    get:
      tags:
        - ProductGroup
      summary: Get ProductGroup by external Code
      operationId: GetByExternalCodeProductGroupController
      parameters:
        - name: externalCode
          in: path
          description: ProductGroup external code
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 40f041b7-b8a7-46bb-ad7b-3db4b91e90c6
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productGroups:
    post:
      tags:
        - ProductGroup
      summary: Create ProductGroup
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2536ca47-0fec-4ae1-87f1-c207ff57b2ad
      requestBody:
        description: ProductGroup to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductGroupRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductGroupResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/{id}:
    delete:
      tags:
        - ProductLine
      summary: Delete ProductLine by Id
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 780beea6-de90-4e19-8536-daa4932d3b6e
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ProductLine
      summary: Get ProductLine by id
      operationId: GetByIdProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e524b837-5645-4f79-93c1-0ada88e20dab
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ProductLine
      summary: Update part of ProductLine
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ProductLine/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ProductLine id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4fccab83-8b4f-41a1-a4c1-9c906b0c7506
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ProductLine
      summary: Update ProductLine
      parameters:
        - name: id
          in: path
          description: ProductLine Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 882b0131-cf65-4c1a-8bbc-b8c63a837a19
      requestBody:
        description: ProductLine to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProductLineRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/paged:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c862c8a3-a711-4543-baf6-faf3154db80b
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines/all:
    get:
      tags:
        - ProductLine
      summary: Get All ProductLine by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProductLineStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 03e47ce0-41b9-481f-ac44-b15467b9065f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/productLines:
    post:
      tags:
        - ProductLine
      summary: Create ProductLine
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 176f1b24-384c-454c-a78f-c08672b92419
      requestBody:
        description: ProductLine to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductLineRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductLineResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}:
    delete:
      tags:
        - PurchaseOrder
      summary: Delete PurchaseOrder by Id
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: f08adbcb-c310-4de0-af94-569068a0934c
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - PurchaseOrder
      summary: Get PurchaseOrder by id
      operationId: GetByIdPurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 77d7a047-0628-4733-a47f-b28ac777b085
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - PurchaseOrder
      summary: Update part of PurchaseOrder
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/PurchaseOrder/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: PurchaseOrder id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bad70021-eb11-451c-af9f-3e21cc717724
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - PurchaseOrder
      summary: Update PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: df46fc16-a314-4fda-bf17-72c416d372d6
      requestBody:
        description: PurchaseOrder to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPurchaseOrderRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/paged:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter with pagination
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9db3f244-b399-4693-8c98-85f5245de48a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/all:
    get:
      tags:
        - PurchaseOrder
      summary: Get All PurchaseOrder by filter
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PurchaseOrderStatus'
        - name: clientName
          in: query
          schema:
            type: string
        - name: clientDocument
          in: query
          schema:
            type: string
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateRange
          in: query
          schema:
            type: integer
            format: int64
        - name: userCreatedId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 70c2b43f-5cd7-40c8-9709-f78b10094435
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/approve:
    post:
      tags:
        - PurchaseOrder
      summary: Approve PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 94018528-20d3-4ab0-b708-9d568be642c6
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/cancel:
    post:
      tags:
        - PurchaseOrder
      summary: Cancel PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 2fdf96ba-87a8-415c-b744-61c86f42bb70
      requestBody:
        description: PostCancelPurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCancelPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders:
    post:
      tags:
        - PurchaseOrder
      summary: Create PurchaseOrder
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 04b5ac50-76c6-4d73-a4b9-31cd7c476480
      requestBody:
        description: PurchaseOrder to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPurchaseOrderRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPurchaseOrderResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/refused:
    post:
      tags:
        - PurchaseOrder
      summary: Refused PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3d9b4193-93b0-46c5-b237-2c9bb306d548
      requestBody:
        description: Post Refused PurchaseOrderRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRefusedPurchaseOrderRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/purchaseorders/{id}/sendtoapprove:
    post:
      tags:
        - PurchaseOrder
      summary: SendToApprove PurchaseOrder
      parameters:
        - name: id
          in: path
          description: PurchaseOrder Id
          required: true
          schema:
            type: string
            format: uuid
        - name: areaManagerCode
          in: query
          description: Area Manager Code
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 4d1082c0-7c5e-4b02-9dec-c3cf9cad97ce
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/{id}:
    delete:
      tags:
        - ReasonCancel
      summary: Delete ReasonCancel by Id
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1baf54fa-34dd-412c-bccf-58ab86a8ebba
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonCancel
      summary: Get ReasonCancel by id
      operationId: GetByIdReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: de855a0a-0c77-495a-bc6b-7a7091475977
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonCancel
      summary: Update part of ReasonCancel
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonCancel/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonCancel id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fb5f19cd-1ca5-41f6-96e7-5c4c3a1a113e
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonCancel
      summary: Update ReasonCancel
      parameters:
        - name: id
          in: path
          description: ReasonCancel Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: fea9491e-64e9-4d37-9d67-0c4b2271e6bc
      requestBody:
        description: ReasonCancel to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonCancelRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/paged:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5e7a4d0c-a15a-4673-ae44-a8ac9fc7c155
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels/all:
    get:
      tags:
        - ReasonCancel
      summary: Get All ReasonCancel by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ReasonCancelStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 666869a1-da4c-4dc5-84c0-fa953fe5059f
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonscancels:
    post:
      tags:
        - ReasonCancel
      summary: Create ReasonCancel
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e193a2cc-e3cb-4f07-9bc6-21ad860615ad
      requestBody:
        description: ReasonCancel to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonCancelRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonCancelResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/{id}:
    delete:
      tags:
        - ReasonVisit
      summary: Delete ReasonVisit by Id
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0e4a4390-333c-4ceb-85eb-7738074d6a59
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - ReasonVisit
      summary: Get ReasonVisit by id
      operationId: GetByIdReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 956fb9a1-23c0-4df5-b5f7-683035238aa2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - ReasonVisit
      summary: Update part of ReasonVisit
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/ReasonVisit/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: ReasonVisit id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 678ab198-8443-438c-8d40-f771a9adee04
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - ReasonVisit
      summary: Update ReasonVisit
      parameters:
        - name: id
          in: path
          description: ReasonVisit Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 45e924a8-2a95-4a42-972f-6ca061facddf
      requestBody:
        description: ReasonVisit to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReasonVisitRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/paged:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter with pagination
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6b5f64a8-b46a-4552-a417-4beab7b4ee1d
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits/all:
    get:
      tags:
        - ReasonVisit
      summary: Get All ReasonVisit by filter
      parameters:
        - name: description
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5d676b07-cce3-4017-9d00-a2d819d6f134
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/reasonsvisits:
    post:
      tags:
        - ReasonVisit
      summary: Create ReasonVisit
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 023ee6a1-c2f9-4153-9c4e-956698e12714
      requestBody:
        description: ReasonVisit to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReasonVisitRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReasonVisitResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/{id}:
    delete:
      tags:
        - Template
      summary: Delete Template by Id
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 531c5120-95ea-4ac1-b42a-5552616bbf0f
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Template
      summary: Get Template by id
      operationId: GetByIdTemplate
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a3bf3855-b59f-4312-869e-e861b23b37ed
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Template
      summary: Update part of Template
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/Template/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: Template id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 75003fd6-fc07-4295-8bb2-a7099206e323
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - Template
      summary: Update Template
      parameters:
        - name: id
          in: path
          description: Template Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 454e3400-c2fe-4f69-882f-f944a56a4583
      requestBody:
        description: Template to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTemplateRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/paged:
    get:
      tags:
        - Template
      summary: Get All Template by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: bd548938-2105-452d-a21b-a2484462db9c
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates/all:
    get:
      tags:
        - Template
      summary: Get All Template by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c5a3e2d5-51cf-4c47-a0b7-ac02b3044f57
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/templates:
    post:
      tags:
        - Template
      summary: Create Template
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 726ff7af-db3b-46f9-bef8-f53eea795864
      requestBody:
        description: Template to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTemplateRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTemplateResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/{id}:
    delete:
      tags:
        - User
      summary: Delete User by Id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 24df0177-6b77-4e9c-a640-a9581bf9b1b6
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - User
      summary: Get User by id
      operationId: GetByIdUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0da373c6-ce57-4a25-838b-c3dc496d9e1a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - User
      summary: Update part of User
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/User/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 117abee9-a461-483c-9036-6ab230193854
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - User
      summary: Update User
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a5fcd5f1-bef1-4f27-8a1c-9016e9286ac3
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/paged:
    get:
      tags:
        - User
      summary: Get All User by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 43f51ee1-6f91-4151-874b-e50eb5616d7a
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/all:
    get:
      tags:
        - User
      summary: Get All User by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: documentId
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: isSalesman
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 8d968209-4e66-4996-b999-2226cac59dc3
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/userinfo:
    get:
      tags:
        - User
      summary: Get User Info
      operationId: GetUserInfo
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 5506b1c8-1231-467c-b6ad-a3feed2321b2
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInfoResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/photo/upload:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9cf22f16-d006-4983-b4a5-63a8b1f77245
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - images
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              images:
                style: form
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 9e04a78b-e333-4e9c-8a66-8b170f0defd8
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/forcerchangepassword:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 3ac87d95-bc3c-4688-a906-241d958c3d50
      requestBody:
        description: Force Change Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserForceChangePasswordRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/pushtoken:
    post:
      tags:
        - User
      summary: Add User Push Token
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: af8c553d-51b0-4eb3-a310-c8c325c98654
      requestBody:
        description: FCM Token
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostUserPushTokenRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/reset_password:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 26b1856e-d342-4cc8-9b03-fcdeea5eb2cf
      requestBody:
        description: Reset Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserResetPassword'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResetPasswordResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signin:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: ee744630-bb94-4b21-b5cb-9c2a65468f45
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserSignInRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserSignInResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/signup:
    post:
      tags:
        - User
      summary: Create User
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a7feeef6-3a6d-4878-8507-65e0e3898e82
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/users/photo:
    put:
      tags:
        - User
      summary: Update User Photo
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 6eae2a6e-d02a-4ee6-9ffc-c86ed9080143
      requestBody:
        description: User to update
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PutProfilePhotoRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PutProfilePhotoRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PutProfilePhotoRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutProfilePhotoRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/{id}:
    delete:
      tags:
        - VehicleType
      summary: Delete VehicleType by Id
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: c0127931-16aa-44c9-abcf-cfb48a096a12
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - VehicleType
      summary: Get VehicleType by id
      operationId: GetByIdVehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 0cc1d7e8-bd43-4b37-aa0f-ec856cf0e519
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - VehicleType
      summary: Update part of VehicleType
      description: "Sample request:\r\n            \r\n    PATCH /tepsales/v1/VehicleType/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]"
      parameters:
        - name: id
          in: path
          description: VehicleType id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 89e83551-d4cc-4b13-8f82-31d2842afc40
      requestBody:
        description: Atributes values
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
        required: true
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    put:
      tags:
        - VehicleType
      summary: Update VehicleType
      parameters:
        - name: id
          in: path
          description: VehicleType Id
          required: true
          schema:
            type: string
            format: uuid
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e41537c8-dab9-4cff-a57e-dd347609958b
      requestBody:
        description: VehicleType to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutVehicleTypeRequest'
      responses:
        '204':
          description: >-
            No Content - There is no content to send for this request, but the
            headers may be useful. The user-agent may update its cached headers
            for this resource with the new ones.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/paged:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter with pagination
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: cebf5d10-c1d3-420d-a3b4-40c8eba0775e
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPagedVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes/all:
    get:
      tags:
        - VehicleType
      summary: Get All VehicleType by filter
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: externalCode
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VehicleTypeStatus'
        - name: limit
          in: query
          description: limit
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          description: 'Sorting atributes, sample: id.desc,name.asc'
          schema:
            type: string
            default: Id.desc
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: e73732a4-f3dd-4251-8632-b6e61cde0672
      responses:
        '200':
          description: Ok - The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/vehicleTypes:
    post:
      tags:
        - VehicleType
      summary: Create VehicleType
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: 1a5394da-91c4-4a0d-be0b-f067ee6cbc10
      requestBody:
        description: VehicleType to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVehicleTypeRequest'
      responses:
        '201':
          description: >-
            Created - The request has succeeded and a new resource has been
            created as a result of it. This is typically the response sent after
            a POST request, or after some PUT requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostVehicleTypeResponse'
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '412':
          description: >-
            Precondition Failed - The client has indicated preconditions in its
            headers which the server does not meet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '422':
          description: >-
            Unprocessable Entity - The request was well-formed but was unable to
            be followed due to semantic errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /tepsales/v1/version:
    get:
      tags:
        - Version
      summary: Get Version
      parameters:
        - name: x-api-key
          in: header
          description: Your Api Key
          schema:
            type: string
        - name: x-csrf-token
          in: header
          description: CSRF Protection
          schema:
            type: string
            default: a1281a13-5cf9-45d2-bf47-191e73d91c8a
      responses:
        '200':
          description: Ok - The request has succeeded.
        '400':
          description: Bad Request – This means that client-side input fails validation.
        '401':
          description: >-
            Unauthorized – This means the user isn’t not authorized to access a
            resource. It usually returns when the user isn’t authenticated.
        '403':
          description: >-
            Forbidden – This means the user is authenticated, but it’s not
            allowed to access a resource.
        '404':
          description: >-
            Not Found – The server can not find requested resource. In the
            browser, this means the URL is not recognized. In an API, this can
            also mean that the endpoint is valid but the resource itself does
            not exist. Servers may also send this response instead of 403 to
            hide the existence of a resource from an unauthorized client. This
            response code is probably the most famous one due to its frequent
            occurence on the web.
        '500':
          description: >-
            Intertal Server Error - The server has encountered a situation it
            doesn't know how to handle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
components:
  schemas:
    ActionType:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
          nullable: true
        longitude:
          type: number
          format: double
          nullable: true
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    AddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    AddressTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    ClientContactCalendarStatus:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      format: int32
    ClientStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    CommissionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    CompanyModelBase:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    DatabaseCollector:
      type: object
      properties:
        outPutFolder:
          type: string
          nullable: true
        connection:
          $ref: '#/components/schemas/DatabaseConnection'
        queries:
          $ref: '#/components/schemas/DatabaseQueries'
      additionalProperties: false
    DatabaseConnection:
      type: object
      properties:
        name:
          type: string
          nullable: true
        server:
          type: string
          nullable: true
        port:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        commandTimeout:
          type: integer
          format: int32
        minPoolSize:
          type: integer
          format: int32
        maxPoolSize:
          type: integer
          format: int32
      additionalProperties: false
    DatabaseQueries:
      type: object
      properties:
        queryAddresses:
          type: string
          nullable: true
        queryAddressesIsEnable:
          type: boolean
        queryClients:
          type: string
          nullable: true
        queryClientsIsEnable:
          type: boolean
        queryFreightTables:
          type: string
          nullable: true
        queryFreightTablesIsEnable:
          type: boolean
        queryPaymentConditions:
          type: string
          nullable: true
        queryPaymentConditionsIsEnable:
          type: boolean
        queryPaymentPriceTables:
          type: string
          nullable: true
        queryPaymentPriceTablesIsEnable:
          type: boolean
        queryPriceTableItems:
          type: string
          nullable: true
        queryPriceTableItemsIsEnable:
          type: boolean
        queryPriceTables:
          type: string
          nullable: true
        queryPriceTablesIsEnable:
          type: boolean
        queryProductGroups:
          type: string
          nullable: true
        queryProductGroupsIsEnable:
          type: boolean
        queryProductLines:
          type: string
          nullable: true
        queryProductLinesIsEnable:
          type: boolean
        queryProducts:
          type: string
          nullable: true
        queryProductsIsEnable:
          type: boolean
        queryUsers:
          type: string
          nullable: true
        queryUsersIsEnable:
          type: boolean
        queryVehicleTypes:
          type: string
          nullable: true
        queryVehicleTypesIsEnable:
          type: boolean
        queryDistribuitionCenterClientAddress:
          type: string
          nullable: true
        queryDistribuitionCenterClientAddressIsEnable:
          type: boolean
        queryFreightConversionFactor:
          type: string
          nullable: true
        queryFreightConversionFactorIsEnable:
          type: boolean
        queryDiscountRule:
          type: string
          nullable: true
        queryDiscountRuleIsEnable:
          type: boolean
        queryCommission:
          type: string
          nullable: true
        queryCommissionIsEnable:
          type: boolean
        queryReasonCancel:
          type: string
          nullable: true
        queryReasonCancelIsEnable:
          type: boolean
        queryPriceTableUnloading:
          type: string
          nullable: true
        queryPriceTableUnloadingIsEnable:
          type: boolean
      additionalProperties: false
    DiscountRuleStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DiscountTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DiscountWeightTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    DistribuitionCenterClientAddressStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DocumentVersion:
      type: object
      additionalProperties: false
    ErrorDetails:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: string
          nullable: true
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FreightComposition:
      type: object
      properties:
        vehicleType:
          $ref: '#/components/schemas/VehicleType'
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightCompositionModel:
      type: object
      properties:
        vehicleTypeId:
          type: string
          format: uuid
        weight:
          type: number
          format: double
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    FreightConversionFactorStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    FreightType:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    GetAllAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    GetAllAuditResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        entity:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ActionType'
        data:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        reasonVisitDescription:
          type: string
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        status:
          $ref: '#/components/schemas/ClientContactCalendarStatus'
        allDay:
          type: boolean
          nullable: true
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    GetAllCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    GetAllCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    GetAllCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    GetAllDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    GetAllDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    GetAllDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    GetAllDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    GetAllFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    GetAllFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    GetAllIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    GetAllIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    GetAllNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    GetAllPagedAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAddressResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedAuditResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllAuditResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientContactCalendarResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientContactCalendarResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedClientResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllClientResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCommissionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCommissionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyGlobalParameterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyGlobalParameterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedCompanyResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllCompanyResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountRuleResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountRuleResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDiscountWeightResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDiscountWeightResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: >-
              #/components/schemas/GetAllDistribuitionCenterClientAddressResponse
          nullable: true
      additionalProperties: false
    GetAllPagedDistribuitionCenterResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllDistribuitionCenterResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightConversionFactorResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightConversionFactorResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedFreightTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllFreightTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationConfigResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationConfigResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedIntegrationStatusResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllIntegrationStatusResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedNotificationResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllNotificationResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentConditionResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentConditionResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPaymentPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPaymentPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableItemResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableItemResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPriceTableUnloadingResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPriceTableUnloadingResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductGroupResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductGroupResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductLineResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductLineResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedProductResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllProductResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedPurchaseOrderResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllPurchaseOrderResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonCancelResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonCancelResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedReasonVisitResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReasonVisitResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedTemplateResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllTemplateResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedUserResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllUserResponse'
          nullable: true
      additionalProperties: false
    GetAllPagedVehicleTypeResponse:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rowCount:
          type: integer
          format: int32
        firstRowOnPage:
          type: integer
          format: int32
        lastRowOnPage:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetAllVehicleTypeResponse'
          nullable: true
      additionalProperties: false
    GetAllPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    GetAllPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    GetAllPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    GetAllPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    GetAllPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    GetAllProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    GetAllProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    GetAllProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    GetAllPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightComposition'
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        reasonCancel:
          $ref: '#/components/schemas/ReasonCancel'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    GetAllReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    GetAllReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    GetAllTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    GetAllUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    GetAllVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    GetUserInfoResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        company:
          $ref: '#/components/schemas/CompanyModelBase'
      additionalProperties: false
    GetWidgetsDto:
      type: object
      properties:
        totalOrders:
          type: integer
          format: int64
        totalUsers:
          type: integer
          format: int64
        totalProducts:
          type: integer
          format: int64
        totalClients:
          type: integer
          format: int64
      additionalProperties: false
    GroupPurchaseOrderDto:
      type: object
      properties:
        totalInProgress:
          type: integer
          format: int64
        totalWaitingForApproved:
          type: integer
          format: int64
        totalApproved:
          type: integer
          format: int64
        totalRefused:
          type: integer
          format: int64
        totalCanceled:
          type: integer
          format: int64
        totalExpired:
          type: integer
          format: int64
      additionalProperties: false
    IntegrationStatusActions:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
    NotificationChannel:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    NotificationType:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    Operation:
      type: object
      properties:
        operationType:
          $ref: '#/components/schemas/OperationType'
        path:
          type: string
          nullable: true
        op:
          type: string
          nullable: true
        from:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    OperationType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PaymentCondition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PaymentConditionStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PaymentPriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PostAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PostCancelPurchaseOrderRequest:
      type: object
      properties:
        reasonCancelId:
          type: string
          format: uuid
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        reasonVisitDescription:
          type: string
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        status:
          $ref: '#/components/schemas/ClientContactCalendarStatus'
        allDay:
          type: boolean
          nullable: true
      additionalProperties: false
    PostClientContactCalendarResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        reasonVisitDescription:
          type: string
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        status:
          $ref: '#/components/schemas/ClientContactCalendarStatus'
        allDay:
          type: boolean
          nullable: true
      additionalProperties: false
    PostClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostClientResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PostCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCommissionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PostCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyGlobalParameterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PostCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostCompanyResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PostDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountRuleResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PostDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDiscountWeightResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PostDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterClientAddressResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PostDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostDistribuitionCenterResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PostFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightConversionFactorResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PostFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostFreightTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PostIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationConfigResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PostIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostIntegrationStatusResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PostNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    PostNotificationResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PostPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentConditionResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PostPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPaymentPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PostPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableItemResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PostPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PostPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostPriceTableUnloadingResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PostProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductGroupResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PostProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductLineResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PostProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostProductResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PostPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PostPurchaseOrderResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentCondition:
          $ref: '#/components/schemas/PaymentCondition'
        client:
          $ref: '#/components/schemas/Client'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        invoiceAddress:
          $ref: '#/components/schemas/Address'
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
          nullable: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderHistory'
          nullable: true
        mobileCreatedUser:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
      additionalProperties: false
    PostReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonCancelResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PostReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostReasonVisitResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PostRefusedPurchaseOrderRequest:
      type: object
      properties:
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PostTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostTemplateResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PostUserForceChangePasswordRequest:
      required:
        - defaultPassword
        - email
      type: object
      properties:
        email:
          minLength: 1
          type: string
        defaultPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserPushTokenRequest:
      required:
        - deviceId
        - token
      type: object
      properties:
        token:
          minLength: 1
          type: string
        deviceId:
          minLength: 1
          type: string
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
      additionalProperties: false
    PostUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        password:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResetPassword:
      required:
        - email
        - newPassword
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        newPassword:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserResetPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          nullable: true
      additionalProperties: false
    PostUserResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PostUserSignInRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    PostUserSignInResponse:
      type: object
      properties:
        token:
          type: string
          nullable: true
        expiresIn:
          type: number
          format: double
      additionalProperties: false
    PostVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PostVehicleTypeResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    PriceTableItemStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PriceTableUnloadingStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
      additionalProperties: false
    ProductEspecification:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    ProductGroupStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductLineStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ProductStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PurchaseOrderHistory:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
        date:
          type: string
          format: date-time
        summary:
          type: string
          nullable: true
        userId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    PurchaseOrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderItemModelBase:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
          nullable: true
        weightTotal:
          type: number
          format: double
          nullable: true
        unitPrice:
          type: number
          format: double
          nullable: true
        unitPriceQtd:
          type: number
          format: double
          nullable: true
        unitTotalPrice:
          type: number
          format: double
          nullable: true
        percDiscountCommission:
          type: number
          format: double
          nullable: true
        valueDiscount:
          type: number
          format: double
          nullable: true
        percDiscount:
          type: number
          format: double
          nullable: true
        useValueDiscount:
          type: number
          format: double
          nullable: true
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        discountByWeight:
          type: number
          format: double
          nullable: true
        discountTotal:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PurchaseOrderStatus:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    PushToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        deviceId:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        osVersion:
          type: string
          nullable: true
        deviceName:
          type: string
          nullable: true
        deviceModel:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PushTokenStatus'
      additionalProperties: false
    PushTokenStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    PutAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        neighborhood:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        complement:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ie:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AddressTypeEnum'
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AddressStatus'
      additionalProperties: false
    PutClientContactCalendarRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
          nullable: true
        reasonVisitId:
          type: string
          format: uuid
          nullable: true
        reasonVisitDescription:
          type: string
          nullable: true
        clientName:
          type: string
          nullable: true
        salesmanId:
          type: string
          format: uuid
        salesmanName:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        status:
          $ref: '#/components/schemas/ClientContactCalendarStatus'
        allDay:
          type: boolean
          nullable: true
      additionalProperties: false
    PutClientRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ClientStatus'
        userSellerId:
          type: string
          format: uuid
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
      additionalProperties: false
    PutCommissionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CommissionStatus'
      additionalProperties: false
    PutCompanyGlobalParameterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        companyId:
          type: string
          format: uuid
        discountRuleByBudget:
          type: boolean
      additionalProperties: false
    PutCompanyRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
      additionalProperties: false
    PutDiscountRuleRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        discountWeightType:
          $ref: '#/components/schemas/DiscountWeightTypeEnum'
        minQuantity:
          type: number
          format: double
        discountType:
          $ref: '#/components/schemas/DiscountTypeEnum'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        referenceId:
          type: string
          format: uuid
        discount:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DiscountRuleStatus'
      additionalProperties: false
    PutDiscountWeightRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        quantity:
          type: number
          format: double
        percent:
          type: number
          format: double
      additionalProperties: false
    PutDistribuitionCenterClientAddressRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        addressId:
          type: string
          format: uuid
        earthDistance:
          type: number
          format: double
        distance:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/DistribuitionCenterClientAddressStatus'
      additionalProperties: false
    PutDistribuitionCenterRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        document:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        ie:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/GetAllAddressResponse'
      additionalProperties: false
    PutFreightConversionFactorRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/FreightConversionFactorStatus'
      additionalProperties: false
    PutFreightTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        vehicleTypeId:
          type: string
          format: uuid
        initialKilometer:
          type: number
          format: double
        finalKilometer:
          type: number
          format: double
        value:
          type: number
          format: double
        isFractional:
          type: boolean
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        status:
          $ref: '#/components/schemas/FreightTableStatus'
      additionalProperties: false
    PutIntegrationConfigRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        timerQueriesCollector:
          type: number
          format: double
        databaseCollector:
          $ref: '#/components/schemas/DatabaseCollector'
      additionalProperties: false
    PutIntegrationStatusRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        context:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/IntegrationStatusActions'
        status:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        quantityEntities:
          type: integer
          format: int64
      additionalProperties: false
    PutNotificationRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/NotificationType'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          nullable: true
        attributes:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
      additionalProperties: false
    PutPaymentConditionRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        sequence:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PaymentConditionStatus'
      additionalProperties: false
    PutPaymentPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        priceTableId:
          type: string
          format: uuid
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PaymentPriceTableStatus'
      additionalProperties: false
    PutPriceTableItemRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        value:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableItemStatus'
      additionalProperties: false
    PutPriceTableRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        operationType:
          $ref: '#/components/schemas/TablePriceOperationTypeEnum'
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PriceTableStatus'
      additionalProperties: false
    PutPriceTableUnloadingRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        paymentConditionId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PriceTableUnloadingStatus'
        valueOfKG:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
      additionalProperties: false
    PutProductGroupRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductGroupStatus'
      additionalProperties: false
    PutProductLineRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ProductLineStatus'
      additionalProperties: false
    PutProductRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        productGroupId:
          type: string
          format: uuid
        productLineId:
          type: string
          format: uuid
        weightkilograms:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unitMeasurementType:
          $ref: '#/components/schemas/UnitMeasurementTypeEnum'
        status:
          $ref: '#/components/schemas/ProductStatus'
        photo:
          type: string
          nullable: true
        especification:
          type: array
          items:
            $ref: '#/components/schemas/ProductEspecification'
          nullable: true
      additionalProperties: false
    PutProfilePhotoRequest:
      required:
        - data
        - extension
      type: object
      properties:
        data:
          type: string
          format: byte
        extension:
          minLength: 1
          type: string
      additionalProperties: false
    PutPurchaseOrderRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        freightValue:
          type: number
          format: double
          nullable: true
        unloadingValue:
          type: number
          format: double
          nullable: true
        freightType:
          $ref: '#/components/schemas/FreightType'
        valueWithoutFreight:
          type: number
          format: double
          nullable: true
        totalValue:
          type: number
          format: double
          nullable: true
        discount:
          type: number
          format: double
          nullable: true
        distance:
          type: number
          format: double
          nullable: true
        earthDistance:
          type: number
          format: double
          nullable: true
        totalWeightkilograms:
          type: integer
          format: int32
          nullable: true
        dueDate:
          type: string
          format: date-time
        mobileCreatedAt:
          type: string
          format: date-time
        isFreightFractional:
          type: boolean
        integrationCode:
          type: string
          nullable: true
        paymentConditionId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        deliveryAddressId:
          type: string
          format: uuid
        invoiceAddressId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItemModelBase'
          nullable: true
        freightCompositions:
          type: array
          items:
            $ref: '#/components/schemas/FreightCompositionModel'
          nullable: true
        mobileCreatedUserId:
          type: string
          format: uuid
        paymentPriceTableId:
          type: string
          format: uuid
        distribuitionCenterId:
          type: string
          format: uuid
        distribuitionCenterClientAddressId:
          type: string
          format: uuid
      additionalProperties: false
    PutReasonCancelRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    PutReasonVisitRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
      additionalProperties: false
    PutTemplateRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        businessId:
          type: integer
          format: int32
      additionalProperties: false
    PutUserRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        isSuperAdmin:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        isRegionManager:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    PutVehicleTypeRequest:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          nullable: true
        userUpdated:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    ReasonCancel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReasonCancelStatus'
      additionalProperties: false
    ReasonCancelStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ReferenceTypeEnum:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
    TablePriceOperationTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    UnitMeasurementTypeEnum:
      enum:
        - 1
        - 2
      type: integer
      format: int32
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        documentId:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        isActive:
          type: boolean
        isSuperAdmin:
          type: boolean
        isAdmin:
          type: boolean
        isRegionManager:
          type: boolean
        isSalesman:
          type: boolean
        isIntegration:
          type: boolean
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        forceChangePassword:
          type: boolean
        pushTokens:
          type: array
          items:
            $ref: '#/components/schemas/PushToken'
          nullable: true
      additionalProperties: false
    UserStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    VehicleType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        userCreated:
          type: string
          format: uuid
          nullable: true
        userUpdated:
          type: string
          format: uuid
          nullable: true
        version:
          $ref: '#/components/schemas/DocumentVersion'
        companyId:
          type: string
          format: uuid
          nullable: true
        ownerId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        capacity:
          type: number
          format: double
        maxCapacity:
          type: number
          format: double
        externalCode:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/VehicleTypeStatus'
      additionalProperties: false
    VehicleTypeStatus:
      enum:
        - 0
        - 1
      type: integer
      format: int32
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\""
      name: Authorization
      in: header
security:
  - Bearer: []
